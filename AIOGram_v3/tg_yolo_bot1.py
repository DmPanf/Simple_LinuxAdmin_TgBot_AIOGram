#@title –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π TgBot-2 –¥–ª—è Google Colab
import asyncio
import os
import json
import nest_asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import FSInputFile
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã event loop –≤ Google Colab
nest_asyncio.apply()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
MODEL_PATH = "yolov8m-seg.pt"
DEFAULT_CLASSES = "[0:79]"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    response = (f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ <b>{now}</b>!\n"
                f"–ö–∞—Ç–∞–ª–æ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã: <b>{IMAGES_FOLDER}</b> –∏ <b>{RESULTS_FOLDER}</b>.\n"
                f"üìÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>/date</code>, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è!\n"
                f"... –∏–ª–∏ <b>/help</b>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    await message.reply(response)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {response}")
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {response}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /date - –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
@dp.message(Command("date"))
async def cmd_date(message: types.Message):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    response = f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>{now}</b>."
    await message.reply(response)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π: {response}")
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π: {response}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –≤—ã–≤–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    response = ("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "<code>/start</code> - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "<code>/date</code> - –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
                "<code>/help</code> - –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
                "<code>/setclasses [–¥–∏–∞–ø–∞–∑–æ–Ω]</code> - –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /setclasses [1:5])")
    await message.reply(response)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: {response}")
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: {response}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setclasses –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
@dp.message(Command("setclasses"))
async def set_classes(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "/setclasses –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–ª–∞—Å—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setclasses [1:5] –∏–ª–∏ /setclasses 1:5"
        await message.reply(response)
        return
    args = parts[1].strip()

    # –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
    def validate_class_range(arg: str) -> bool:
        arg_clean = arg.strip("[]")
        if ':' not in arg_clean:
            return False
        try:
            start_str, end_str = arg_clean.split(':', 1)
            start = int(start_str)
            end = int(end_str)
            return start <= end
        except ValueError:
            return False

    if not validate_class_range(args):
        response = ("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç [start:end], –≥–¥–µ start –∏ end - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –∏ start <= end.")
        await message.reply(response)
        return

    global DEFAULT_CLASSES
    DEFAULT_CLASSES = args
    response = f"‚úÖ –ù–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–ª–∞—Å—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {DEFAULT_CLASSES}\n–ñ–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π..."
    await message.reply(response)
    logger.info(response)
    print(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ F
@dp.message(F.content_type == "photo")
async def handle_photo(message: types.Message):
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    photo = message.photo[-1]
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    os.makedirs(IMAGES_FOLDER, exist_ok=True)
    os.makedirs(RESULTS_FOLDER, exist_ok=True)
    input_path = os.path.join(IMAGES_FOLDER, "input.jpg")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ
    file_info = await bot.get_file(photo.file_id)
    await bot.download_file(file_info.file_path, destination=input_path)

    response_text = f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –∫–ª–∞—Å—Å–æ–≤: {DEFAULT_CLASSES}"
    await message.reply(response_text)
    logger.info(response_text)
    print(response_text)
    try:
        output_file = process_image(MODEL_PATH, image_name=input_path, classes=DEFAULT_CLASSES)
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
        await message.reply(error_text)
        logger.error(error_text)
        print(error_text)
        return
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_path = os.path.join(RESULTS_FOLDER, output_file)
    os.replace(output_file, output_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è FSInputFile
    from aiogram.types import FSInputFile
    photo_input = FSInputFile(output_path)
    await message.reply_photo(photo=photo_input, caption="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ)
@dp.message(F.content_type == "text")
async def log_all_text_messages(message: types.Message):
    if message.text and message.text.startswith('/'):
        return
    user_info = f"{message.from_user.id} - {message.from_user.full_name}" if message.from_user else "Unknown user"
    log_text = f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info}: {message.text}"
    logger.info(log_text)
    print(log_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ polling –±–æ—Ç–∞...")
    print("–ó–∞–ø—É—Å–∫ polling –±–æ—Ç–∞...")
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ Google Colab
if __name__ == '__main__':
    asyncio.run(main())
