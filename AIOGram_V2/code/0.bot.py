#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# 28-05-2021
# -----| –ü—Ä–∏–º–µ—Ä –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é:
#   rez = sorted(os.listdir(myDir + '/data/sysinfo'))
#   iList = list(filter(lambda x: x.endswith('.sh'), rez))
# iList = glob(myDir + '/data/sysinfo/*.sh') # –í–∞—Ä.1. –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ –º–∞—Å–∫–µ
# iList = list(glob(os.path.join(myDir + '/data/sysinfo', '*.sh'))) # –í–∞—Ä.2. –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ –º–∞—Å–∫–µ
# -----| –ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –º–∞—Å–∫–µ
# import os, glob
# for file in glob.glob('/home/ihor/*.py'):
#    os.remove(file)

import logging
#from aiogram import Bot, Dispatcher, executor, types
from aiogram import Bot, executor, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ParseMode, InputMediaPhoto # –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–ª—è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –§–û–¢–û
from aiogram.utils.markdown import text, bold, italic, code, underline, strikethrough

# async def delete_message(message: types.Message, sleep_time: int = 0): # –Ω–µ –ø–æ—à–ª–æ)) –ù–ï –£–î–ê–õ–Ø–ï–¢ DICE!!!
#from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted, MessageToDeleteNotFound)
#from contextlib import suppress # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ë–æ—Ç–∞ !!!! [asyncio.create_task(delete_message(msg, 5))]
import asyncio # await asyncio.sleep(1) # Wait a little

import subprocess # –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ Linux
import os  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —Ç–∏–ø–∞: rez = sorted(os.listdir(path))
from glob import glob # –î–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –º–∞—Å–∫–µ: list(glob(os.path.join(myDir, '*.sh')))
import random # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è MediGroup (SEND FILES) —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–∑ 9 —Ñ–æ—Ç–æ = –ë–û–õ–¨–®–ï –ù–ï –ü–†–û–•–û–î–ò–¢! (–≤–∏–¥–∏–º–æ —Ä–∞–∑–º–µ—Ä)
from PIL import Image  # –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ width = image.size[0] #–û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É
#import cv2 # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –í–∏–¥–µ–æ –§–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ = –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ pip3
import json # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏: json.dump(data, outfile) & data = json.load(json_file)

import time # time.sleep(5)   # Delays for 5 seconds
from datetime import datetime
from pytz import timezone # tz = timezone("Europe/Moscow") -> today = datetime.now(tz) -> iTime = today.strftime("%H:%M:%S")

from myconfig import *
from keyboard import *

PASS = False # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –≤—Ö–æ–¥–µ [def: global PASS] –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Å–µ–≤–¥–æ-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
iKey = ''    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –ø—Å–µ–≤–¥–æ-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
myPass = 'üöëüí°‚è≥' # —Å–∫–æ—Ä–∞—è –ª–∞–º–ø–æ—á–∫–∞ –ø–µ—Å–æ—á–Ω—ã–µ_—á–∞—Å—ã
iNum = 0
tz = timezone("Europe/Moscow")

uid01 = USER_ID_01          # My Main ID
#uid11 = USER_ID_11          # VVM Main ID
TOKEN = TOKEN_11            # [‚öôÔ∏è VTI Comp Assistantüí°] = vti-monitor {New Bot [27-05-2021] for vvm}
bot = Bot(token=TOKEN)      # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
dp = Dispatcher(bot)        # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
# Configure logging
logging.basicConfig(level=logging.INFO) # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# ========== [ON START UP] ====================]
async def on_startup(dp): # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å [executor.start_polling(dp, on_startup=on_startup, skip_updates=False)]
#    return True
#   print ('1 ____ set def com___')
   await set_default_commands(dp) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
#   print ('2 ____ start up___')
   await on_startup_notify(dp)    # –ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø—Ä–æ –∑–∞–ø—É—Å–∫


# ========== [SET DEFAULT MENU] ===============]
async def set_default_commands(dp):
   await dp.bot.set_my_commands([
      types.BotCommand('help24', '–í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É üí°'),
      types.BotCommand('my_mems', '–®–ø–∞—Ä–≥–∞–ª–∫–∞ üóÑ'),
      types.BotCommand('weather24', '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã 24—á üå§'),
      types.BotCommand('games24', 'Relax –∏–≥—Ä—ã —é–º–æ—Ä üéÆ'),
      types.BotCommand('proxy_vpn', '–ó–∞–ø—É—Å—Ç–∏—Ç—å proxy London üì°'),
      types.BotCommand('server_kino', '–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∫–∏–Ω–æ üñ•'),
      types.BotCommand('set_vpn', '–†–∞–∑—Ä–µ—à–∏—Ç—å admin-–¥–æ—Å—Ç—É–ø ssh üåê'),
      types.BotCommand('open_rdp', '–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Ä–∞–Ω—É üà¥'),
      types.BotCommand('admin_bot', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç admin_linux üíé'),
      types.BotCommand('stop_bot', '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ üì¥'),
      types.BotCommand('stop_computer', '0.–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä! üî¥'),
   ])

# ========== [ON START UP NOTIFY] =============]
async def on_startup_notify(dp): # –ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø—Ä–æ –∑–∞–ø—É—Å–∫ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º
   for user in ID:
      try:
#         await dp.bot.send_message(user, '‚öôÔ∏è VTI Comp Assistüí° is ON!')
#         iMsg = '‚öôÔ∏è *VTI* Comp Assistant üí°:\n *- –ñ–¥—É –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ ...*'
         iMsg = '‚öôÔ∏è <b>VTI</b> Comp Assistant üí°:&#10; <b>- –ñ–¥—É –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ ...</b>'
         with open(myDir + '/data/00.jpg', 'rb') as photo:
            await bot.send_photo(user, photo, iMsg, parse_mode=ParseMode.HTML, reply_markup=types.ReplyKeyboardRemove())
#            await bot.send_photo(user, photo, iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=types.ReplyKeyboardRemove())
#            await bot.send_photo(ID[0], photo)
#      await message.send_photo(ID[0], photo, caption=MyMsg % message.chat.first_name, parse_mode=ParseMode.MARKDOWN)
      except Exception as err:
         logging.exception(err)


## ========== [DELETE BOT MESSAGES] =============] [ asyncio.create_task(delete_message(msg, 5))]
#async def delete_message(message: types.Message, sleep_time: int = 0):
#   await asyncio.sleep(sleep_time)
#   with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
#      await message.delete()
# –Ω–µ –ø–æ—à–ª–æ))

## ========== [CLEAN THE SCREEN] =============] [ asyncio.create_task(clean_screen(15))]
async def clean_screen(sleep_time: int = 0): # –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω –ü–ö –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
   await asyncio.sleep(sleep_time)
   subprocess.call(['/bin/bash', myDir + '/scripts/kill_proc.sh', 'sm'])



# [START] –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É [/1307] = –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–æ—Ç—É
#@dp.message_handler(commands=['1307', 'start'])
@dp.message_handler(commands=['1307'])
async def start_command(message: types.Message): # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    today = datetime.now(tz)
    iT = today.strftime("%M%S")
    global PASS, iKey
    iKey = ''
    PASS = False
    if str(message.chat.id) in str(ID): # –í—ã–≤–æ–¥ –ø—Å–µ–≤–¥–æ-–º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä—É–≥–∞ –ª–∏—Ü —Å ID
# ----| –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å —ç–∫—Ä–∞–Ω–∞!!!! |-----
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É) –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É!
# ----| –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–∫–æ–Ω–∫–∞–º–∏ –¥–ª—è –í–í–û–î–ê –ü–ê–†–û–õ–Ø ! |-----
#          –ø–∞–ø–∫–∞ –±—É–º–∞–≥–∞ —Ü–∏–ø–ª–µ–Ω–æ–∫ –∑–∞–º–æ–∫  –ª—É–ø–∞
#          –∑—É–±—ã  –∑–µ–º–ª—è  —É–∫–æ–ª     —Å–∫–æ—Ä–∞—è –¥–µ–Ω—å–≥–∏
#          –ø–µ—Å–æ–∫ —Å—á–µ—Ç—ã  –±–ª–æ–∫–Ω–æ—Ç  –∫–æ–º–ø–∞—Å —Å—Ñ–∏–∫—Å
#          –∫–ª–∞–≤–∞ —Å—Ç–µ–∫–ª–æ –ª–∞–º–ø–∞    –ø–æ—á—Ç–∞  –∞–≤—Ç–æ
       passwd_kb = types.InlineKeyboardMarkup(row_width=5)
       text_and_data = (
          ('...üìÇ...', '#GüìÇ' + iT), ('...üßª...Ô∏è', '#Güßª' + iT), ('...üê£...', '#Güê£' + iT), ('...üîê...', '#Güîê' + iT), ('...üîé...', '#Güîé' + iT),
          ('...üíÄ...', '#GüíÄ' + iT), ('...üåñ...', '#Güåñ' + iT), ('...üíâ...', '#Güíâ' + iT), ('...üöë...', '#Güöë' + iT), ('...üí∏...', '#Güí∏' + iT),
          ('...‚è≥...', '#G‚è≥' + iT), ('...üßÆ...', '#GüßÆ' + iT), ('...üìù...', '#Güìù' + iT), ('.üß≠.Ô∏è', '#Güß≠' + iT), ('...üóø...', '#Güóø' + iT),
          ('...‚å®...Ô∏è', '#G‚å®Ô∏è' + iT), ('...üíé...', '#Güíé' + iT), ('...üí°...', '#Güí°' + iT), ('...üì¨...', '#Güì¨'+ iT), ('...üöó...', '#Güöó'+ iT),
       )
       row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
       passwd_kb.add(*row_btns)
       msg = await message.answer(startMsg % message.from_user.first_name, parse_mode=ParseMode.HTML, reply_markup=kb_main_menu)
#       print ('start _______|| ', msg)
       iMsg = 'üåö' # –õ—É–Ω–∞
       await message.answer(iMsg, reply_markup=passwd_kb)
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
#       time.sleep(7) # —Ç–æ—Ä–º–æ–∑–∏—Ç –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
#       await asyncio.sleep(7) # –ø–∞—É–∑–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è)
#       await msg.delete() # –í—Å–µ —É–¥–∞–ª—è–µ—Ç, –Ω–æ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–∂–µ)
    else:
       await other_people(message)
#       return True

@dp.callback_query_handler(lambda c: c.data[0:2] == '#G') # –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö PASSWD
async def passwd_btn(call: types.CallbackQuery):
    global PASS, iKey, myPass
    PASS = False
    today = datetime.now(tz)
    iT = today.strftime("%M%S")
    cid = call.from_user.id
    if str(cid) in str(ID):
       passwd_kb = types.InlineKeyboardMarkup(row_width=5)
       text_and_data = (
          ('...üìÇ...', '#GüìÇ' + iT), ('...üßª...Ô∏è', '#Güßª' + iT), ('...üê£...', '#Güê£' + iT), ('...üîê...', '#Güîê' + iT), ('...üîé...', '#Güîé' + iT),
          ('...üíÄ...', '#GüíÄ' + iT), ('...üåñ...', '#Güåñ' + iT), ('...üíâ...', '#Güíâ' + iT), ('...üöë...', '#Güöë' + iT), ('...üí∏...', '#Güí∏' + iT),
          ('...‚è≥...', '#G‚è≥' + iT), ('...üßÆ...', '#GüßÆ' + iT), ('...üìù...', '#Güìù' + iT), ('.üß≠.Ô∏è', '#Güß≠' + iT), ('...üóø...', '#Güóø' + iT),
          ('...‚å®...Ô∏è', '#G‚å®Ô∏è' + iT), ('...üíé...', '#Güíé' + iT), ('...üí°...', '#Güí°' + iT), ('...üì¨...', '#Güì¨'+ iT), ('...üöó...', '#Güöó'+ iT),
       )
       row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
       passwd_kb.add(*row_btns)
       iMsg = call.data[2]
       await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, reply_markup=passwd_kb)
#    time.sleep(1) # –ü–∞—É–∑–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–Ω–∞—á–∫–æ–≤
       if iMsg == 'üóø': # –°—Ñ–∏–Ω–∫—Å –æ–±–Ω—É–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫!
          iKey = ''
       else:
          iKey = iKey + iMsg
#    print ('=====|| ', iKey)
       if iKey == myPass:
          PASS = True
#       iMsg = 'üåû'
          iMsg = 'üåù'
          await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id)
          time.sleep(2)
          iMsg = '‚ôªÔ∏è  –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É:'
          await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id)
#       await bot.edit_message_text(startMsg % call.from_user.first_name, call.from_user.id, call.message.message_id) # Good!!
#       await bot.send_message(startMsg % call.from_user.first_name, call.from_user.id, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_main_menu) #Bad
#       await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=kb_main_menu) #Bad
    else:
       return True



# +++++++++++++ [MAIN MENU] +++++++++++++++++++++++++] = reply_markup=kb_main_markup # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –û—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é –≤–Ω–∏–∑—É
@dp.message_handler(lambda message: message.text == str(but01.text)) # but01=('üíª SysINFO')   ===== MAIN MENU =====
#async def main_menu_sysinfo(callback_query: types.CallbackQuery):
async def main_menu_sysinfo(message: types.Message):
#    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
       iMsg = '‚ÑπÔ∏è System INFO {' + iTime + '}' + logo
       sysinfo_kb = await make_sysinfo_kb('sysinfo', '#Q') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=sysinfo_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
#       await message.answer('üôà')
#    else:
#       return True



@dp.message_handler(lambda message: message.text == str(but02.text)) # but02=('‚å®Ô∏è  PC Control')   ===== MAIN MENU =====
async def main_menu_pc_control(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await message.answer_dice(emoji="üèÄ")
       await message.answer(help_pc_control, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_pc_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



@dp.message_handler(lambda message: message.text == str(but03.text)) # but03=('üì§ Send Files')   ===== MAIN MENU =====
async def main_menu_send_files(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await message.answer_dice(emoji="‚öΩ")
       await message.answer(help_send_files, parse_mode=ParseMode.HTML, reply_markup=kb_send_menu, disable_web_page_preview=True)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but04.text)) # but04=('üí°HELP')   ===== MAIN MENU =====
async def main_menu_help(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await message.answer_dice(emoji="üé≥")
       await message.answer(help_message, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_help_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

@dp.message_handler(lambda message: message.text == str(but05.text)) # but05=('Tipsüìç')   ===== MAIN MENU =====
async def main_menu_tips(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await message.answer_dice(emoji="üé≥")
       await message.answer(tips_message, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_tips_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but11.text)) # but11=('üè†Smart House üõÅ')   ===== MAIN MENU =====
async def main_menu_smart_house(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await message.answer_dice(emoji="üéØ")
       await message.answer(help_smart_house, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_smart_menu)
       time.sleep(2) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but14.text)) # but14=('üì∫DLNA')   ===== MAIN MENU =====
async def main_menu_dlna(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await message.answer_dice(emoji="üé≤")
       await message.answer(help_dlna, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_dlna_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

# End MAIN +++++++++++++++++++++++]



#@dp.message_handler(lambda message: message.text == str(but20.text)) # but20=('‚Ü©Ô∏è BACK')
@dp.message_handler(lambda message: message.text == str(but20.text)) # but20=('‚Ü©Ô∏è BACK')   +++++ BACK to MAIN MENU +++++
@dp.message_handler(lambda message: message.text == str(but30.text)) # –∏–ª–∏ but30=('‚Ü©Ô∏è')
async def back1_2main_menu(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       iMsg = '‚ôªÔ∏è  –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É:'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_main_menu)
# ---| –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –û–ë–†–ê–¢–ù–û |-----
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



# [1] ---------- Sys INFO --------------]
async def make_sysinfo_kb(Folder, Symb): # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã   +++++ SysINFO +++++
       sysinfo_kb = types.InlineKeyboardMarkup(row_width=3) # –§–û–†–ú–ò–†–£–ï–ú –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ
       myRow = []
       path = myDir + "/data/" + Folder
       rez = sorted(os.listdir(path))
       iList = list(filter(lambda x: x.endswith('.sh'), rez))
       for item in iList:
          btn = str(item)
          my_text = 'üîò ' + btn.strip('.sh')
          my_data = Symb + btn
          myRow.append(types.InlineKeyboardButton(my_text, callback_data=my_data))
       sysinfo_kb.add(*myRow)
       return sysinfo_kb



@dp.callback_query_handler(lambda c: c.data[0:2] == '#Q') # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫  but01=('üíª SysINFO') +++++ SysINFO +++++
async def sysinfo_btn(call: types.CallbackQuery):
  if PASS:
     today = datetime.now(tz)
     iTime = today.strftime("%H:%M:%S")
     iScript = call.data.strip('#Q')
# –†–∞–±–æ—Ç–∞—é—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é! –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–¥–µ—Å—å –æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ—É–¥–æ–±–Ω–æ, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ
#     if call.data[2] == '8': # –ü–æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ [6_–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è] –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é [SOFT]->[LIST]
##        call.data = '#P0' # [SOFT]->[LIST] ('#P3')->[MANUAL]
#        await list_soft_btn(call) # –ó–∞–ø—É—Å–∫ –ù–æ–≤–æ–≥–æ –ú–µ–Ω—é ['#P0']->[SOFT]->[LIST]
#     else:
     subprocess.call(['/bin/bash', myDir + '/data/sysinfo/' + iScript]) # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     iName = iScript.strip('.sh')
     iFile = myDir + '/data/sysinfo/' + iName + '.txt'
     with open(iFile, 'r') as file1: # –°–æ–±—Ä–∞–Ω–Ω–∞—è –°–∫—Ä–∏–ø—Ç–æ–º –ò–Ω—Ñ–æ –∑–∞–ø–∏—Å–∞–Ω–∞ —É–∂–µ –≤ —ç—Ç–æ—Ç –§–∞–π–ª!
        Info = file1.read()
#    iMsg = '‚ÑπÔ∏è System INFO {' + iTime + '}' + logo
     iMsg = '{' + iTime + '} <b>' + iName + ':</b>\n<code>""""""""""""""""""""""""</code>\n' + Info
     sysinfo_kb = await make_sysinfo_kb('sysinfo', '#Q') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
     await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=sysinfo_kb)

# End Sys INFO --------------]



# [2] ---------- PC Control --------------]
@dp.message_handler(commands=['stop_computer']) # –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö –∏–∑ –ú–µ–Ω—é –ö–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: message.text == str(but21.text)) # but21=('üî¥StopPC')   +++++ PC Control +++++
#async def pc_menu_stop(callback_query: types.CallbackQuery):
async def pc_menu_stop(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M")
       iMsg = text(
          '<b>[' + iTime + ']</b> –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω.',
          '&#10;&#10;‚åöÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ <b>–∫–æ–º–∞–Ω–¥–µ</b> —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: [<code>shutdown -c</code>]',
          '&#10;&#10;üëã <b>–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏</b> üëã&#10;.'
       )
#       await message.answer(iMsg + logo, parse_mode=ParseMode.HTML)
       with open(myDir + '/data/lenj.png', 'rb') as photo:
#          await bot.send_photo(message.chat.id, photo, iMsg, parse_mode=ParseMode.HTML, reply_markup=types.ReplyKeyboardRemove())
          await bot.send_photo(message.chat.id, photo, iMsg, parse_mode=ParseMode.HTML)
       subprocess.call(['/bin/bash', myDir + '/scripts/shutdown.sh', 'P'])
#       subprocess.call(['DISPLAY=:0', 'gdialog', '--msgbox', '"–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω.!"'])
#       subprocess.call(['/usr/bin/sudo', '/usr/sbin/shutdown', '-P', '+1'])
       time.sleep(5) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
       sms = await message.answer('ü§ì')
       time.sleep(5)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('ü•±')
       time.sleep(4)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('üßê')
       time.sleep(4)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('ü•∫')
       time.sleep(4)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('üò¢')
       time.sleep(4)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('üò≠')
       time.sleep(4)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('üôà')
       time.sleep(4)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('üôÄ')
       time.sleep(3)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('üò±')
       time.sleep(3)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
       sms = await message.answer('ü•∂')
       time.sleep(3)
       await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º –ú–∞—Ä—Ç—ã—à–∫–∏–Ω—É –º–æ—Ä–¥—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but22.text)) # but22=('üîÑReboot')   +++++ PC Control +++++
async def pc_menu_reboot(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await message.answer('*‚è±  –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ü–ö ...*', parse_mode=ParseMode.MARKDOWN)
#       await message.answer('*‚è±  –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ü–ö ...*', parse_mode=ParseMode.MARKDOWN, show_alert=True) # –û—à–∏–±–∫–∞ ALERT –Ω—É—Ç –∑–¥–µ—Å—å = inline
       await message.answer('*‚è±  –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ü–ö ...*', parse_mode=ParseMode.MARKDOWN)
       subprocess.call(['/bin/bash', myDir + '/scripts/shutdown.sh', 'r'])
#       subprocess.call(['/usr/bin/sudo', '/usr/sbin/init', '6'])
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but23.text)) # but23=('‚öôÔ∏è  Config')   +++++ PC Control +++++
async def pc_menu_config(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       subprocess.call(['/bin/bash', myDir + '/scripts/but23_config.sh'])
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_pc_menu)
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
       iMsg = '‚ò¢Ô∏èÔ∏è  CONFIGs {' + iTime + '}'
       my_config_kb = await make_config_kb() # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
       my_config_kb.row(types.InlineKeyboardButton('üü• CLOSE ALL CONFIG WONDOWs ‚ùå', callback_data='#Close')) # –î–û–ë–ê–í–ò–¢–¨ –ù–ò–ñ–ù–ò–ô –†–Ø–î –ö–ù–û–ü–û–ö
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=my_config_kb)
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=my_config_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but25.text)) # but25=('üà¥ WEB')   +++++ PC Control +++++
async def pc_menu_web(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       iPid = subprocess.call(['/bin/bash', myDir + '/scripts/but25_web.sh'])
#       iMsg = 'WEB-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Python3 –∑–∞–ø—É—â–µ–Ω: ' + str(iPid)
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_pc_menu)
#       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=kb_pc_menu)
       with open(myDir + '/scripts/web.txt', 'r') as file1:
          iMsg = file1.read()
       await message.answer(iMsg, parse_mode=ParseMode.HTML)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(commands=['proxy_vpn']) # –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å Proxy-VPN [London] –∏–∑ –ú–µ–Ω—é –ö–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: message.text == str(but29.text)) # but29='üì°proxy'   +++++ PC Control +++++
async def pc_menu_proxy(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/but29_proxy.sh'])
       with open(myDir + '/scripts/but29_proxy.txt', 'r') as file1:
          iMsg = file1.read()
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=kb_pc_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(commands=['open_rdp']) # –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å VNC [RDP] –∏–∑ –ú–µ–Ω—é –ö–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: message.text == str(but28.text)) # but28='üà¥VNC'   +++++ PC Control +++++
async def pc_menu_vnc(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/but28_vnc.sh'])
       with open(myDir + '/scripts/but28_vnc.txt', 'r') as file1:
          iMsg = file1.read()
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=kb_pc_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(commands=['set_vpn']) # –†–∞–∑—Ä–µ—à–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ SSH-VPN –∏–∑ –ú–µ–Ω—é –ö–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: message.text == str(but26.text)) # but26=('üåê VPN')   +++++ PC Control +++++
async def pc_menu_vpn(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       vIP = subprocess.call(['/bin/bash', myDir + '/scripts/but26_vpn.sh']) # –¢–∞–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç - –Ω—É–∂–Ω–æ —Å–ª–æ–∂–Ω–µ–µ –ø–∏—Å–∞—Ç—å
       subprocess.call(['/bin/bash', myDir + '/scripts/but26_vpn.sh'])
#       iMsg = '<b>VPN</b> –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π <b>–¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –ü–ö</b>\n‚è± –æ—Ç–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>~20</b> –º–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
       with open(myDir + '/scripts/vpn.txt', 'r') as file1:
          iMsg = file1.read()
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_pc_menu)
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=kb_pc_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(commands=['admin_bot']) # –ó–∞–ø—Å—É–∫ –ë–æ—Ç–∞ admin_linux –∏–∑ –ú–µ–Ω—é –ö–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: message.text == str(but27.text)) # but27=('üíé t.me')   +++++ PC Control +++++
async def pc_menu_tmbot(message: types.Message):
#    subprocess.call(['/usr/bin/python3', '../1.Telegram/admin_linux.py']) # –•–æ—Ä–æ—à–∏–π —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/but27_admin.sh'])
       with open(myDir + '/scripts/but27_admin.txt', 'r') as file1:
          iMsg = file1.read()
#    file1 = open('./scripts/but27_admin.txt', 'r')  #|| –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
#    iMsg = file1.readlines()                        #|| —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
#    file1.close                                     #|| –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
#    iMsg = 'Telegram-Bot *admin_linux.py* –∑–∞–ø—É—â–µ–Ω' + str(iPid) + '!\n[–ü–ï–†–ï–ô–¢–ò –≤ admin_linux ‚ÜóÔ∏è](t.me/zaq_ki_no1_bot)'
#    await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_pc_menu)
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=kb_pc_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True
#@dp.message_handler(lambda message: message.text == str(but28.text)) # but28=('')


async def make_config_kb(): # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Config –∏–∑ —Ñ–∞–π–ª–∞    +++++ PC Control +++++
    my_config_kb = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)  # –§–û–†–ú–ò–†–£–ï–ú –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ
    subprocess.call(['/bin/bash', myDir + '/scripts/config.sh'])
    file1 = open(myDir + '/scripts/config_2.txt', 'r') # –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ c –æ—Ç–º–µ—Ç–∫–∞–º–∏ –æ –∑–∞–ø—É—Å–∫–µ –û–ö–û–ù –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
    lines = file1.readlines() # —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    for line in lines: # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        if (line[0:2] == '1#'): # –µ—Å–ª–∏ —É–∂–µ –ó–ê–ü–£–©–ï–ù–û –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
           img = 'üü¢ '
        else:                   # –µ—Å–ª–∏ –µ—â–µ –ù–ï –ó–ê–ü–£–©–ï–ù–û –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
           img = '‚ö™Ô∏è '
        my_text = img + line[2:].strip()
        my_data = '#C' + line[2:].strip() # !!! –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ - –≤—ã–¥–∞–µ—Ç –û–®–ò–ë–ö–£!!!
        my_config_kb.row(types.InlineKeyboardButton(my_text, callback_data=my_data))
    file1.close # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    return my_config_kb


@dp.callback_query_handler(lambda c: c.data == '#Close') # For ('üü• CLOSE ALL CONFIG WONDOWs ‚ùå', callback_data='#Close')
async def close_config_btn(call: types.CallbackQuery):
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    iMsg = '‚ò¢Ô∏èÔ∏è  CONFIGs {' + iTime + '}'
    subprocess.call(['/bin/bash', myDir + '/scripts/config_close.sh']) # –ó–∞–∫—Ä—ã—Ç—å —Ä–∞–∑–æ–º –≤—Å–µ Windows (–û–ö–ù–ê –ù–ê–°–¢–†–û–ï–ö)
    my_config_kb = await make_config_kb() # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
    my_config_kb.row(types.InlineKeyboardButton('üü• CLOSE ALL CONFIG WONDOWs ‚ùå', callback_data='#Close')) # –î–û–ë–ê–í–ò–¢–¨ –ù–ò–ñ–ù–ò–ô –†–Ø–î –ö–ù–û–ü–û–ö
#    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_config_kb)
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=my_config_kb)


@dp.callback_query_handler(lambda c: c.data[0:2] == '#C') # call = CallbackQuery @ TRIGGER For All CONFIG button   +++++ CONFIG +++++
async def triger_config_btn(call: types.CallbackQuery):
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    cName = call.data.strip('#C')
    iMsg = '‚ò¢Ô∏è  CONFIGs {' + iTime + '}'
    subprocess.call(['/bin/bash', myDir + '/scripts/config_triger.sh', cName.strip()])
    my_config_kb = await make_config_kb() # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
    my_config_kb.row(types.InlineKeyboardButton('üü• CLOSE ALL CONFIG WONDOWs ‚ùå', callback_data='#Close')) # –î–û–ë–ê–í–ò–¢–¨ –ù–ò–ñ–ù–ò–ô –†–Ø–î –ö–ù–û–ü–û–ö
#    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_config_kb)
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=my_config_kb)


# End PC Control -------------------------]



# ----------- SEND FILES ----------------]
@dp.message_handler(lambda message: message.text == str(but31.text)) # but31=('üì∑', '= Photos\n')   +++++ SEND FILES +++++
async def photo_menu_send_files(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
       iMsg = 'üì∑ Photos & Images {' + iTime + '}'
       images_kb = await make_folder_kb('Images', '#I', 3, '.jpg') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
#       linux_help_kb.row(types.InlineKeyboardButton('‚ô¶Ô∏è  Media Group ‚ô†Ô∏è', callback_data='#Igroup')) # –ù–µ —è—Å–Ω–æ, –∫–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å Media –≤ Inline???
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=images_kb)
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=images_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

@dp.message_handler(lambda message: message.text == str(but32.text)) # but32=('üéß', '= Sounds\n')   +++++ SEND FILES +++++
async def sound_menu_send_files(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
#       iMsg = 'üì∑ Music & Voice {' + iTime + '}'
       iMsg = 'üéß Music & Voice {' + iTime + '}'
       audio_kb = await make_folder_kb('Voice', '#A', 1, '.mp3') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=audio_kb)
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=audio_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

@dp.message_handler(lambda message: message.text == str(but33.text)) # but33=('üìπ', '= Videos\n')   +++++ SEND FILES +++++
async def video_menu_send_files(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
       iMsg = 'üìπ Video & Movies {' + iTime + '}'
       video_kb = await make_folder_kb('Video', '#V', 2, '.mp4') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=video_kb)
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=video_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

@dp.message_handler(lambda message: message.text == str(but34.text)) # but34=('üìÇ', '= PDF/Docs\n')   +++++ SEND FILES +++++
async def document_menu_send_files(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
       iMsg = 'üóÇ  <b>PDF & DOCs</b> {' + iTime + '}'
       document_kb = await make_folder_kb('PDF', '#F', 1, '.pdf') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=document_kb)
       time.sleep(3) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

@dp.message_handler(lambda message: message.text == str(but35.text)) # but35=('‚ô¶Ô∏è ‚ô†Ô∏è', '= Media Group)    +++++ SEND FILES +++++
async def media_group_send_files(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await types.ChatActions.upload_photo() # Good bots should send chat actions = –í –õ–û–ì–ê–• –ö–£–ß–ê –î–ê–ù–ù–´–• –ü–†–û –ö–ê–†–¢–ò–ù–ö–ò!!!
       media = types.MediaGroup() # Create media group
       path = myDir + '/data/Images'
#       rez = sorted(os.listdir(path)) # –ú–Ω–æ–≥–æ —Ñ–æ—Ç–æ–∫ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ä–∞!!! Limit = 20 Mb
       rez = os.listdir(path)
       randSet = random.sample(rez, 8) # GOOD!!! –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ, —Ç–æ –Ω–µ –±—É–¥–µ—Ç –≤–Ω–∏–∑—É –æ–±—â–µ–π –ø–æ–¥–ø–∏—Å–∏, –∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –ø–æ—Ç–æ–º –±—É–¥—É—Ç!
       for imgName in randSet:
#          media.attach_photo(types.InputFile(myDir + '/data/Images/' + imgName), imgName.strip('.jpg')) # Attach local file with all captions
          media.attach_photo(types.InputFile(myDir + '/data/Images/' + imgName)) # Attach local file with NO CAPTION!
       today = datetime.now(tz)
       iDay = today.strftime("%d-%m-%Y")
       myStr = 'üîò <b>MediaGroup</b> –¥–æ 20 –ú–ë –∏–∑ 9 random –§–æ—Ç–æ [<b>' + iDay + '</b>]'
#       media.attach_photo(types.InputFile(myDir + '/data/tiger.jpg'), caption=myStr, parse_mode=ParseMode.HTML) # –ù—É–∂–Ω–æ –¥–ª—è –û–ë–©–ï–ô –ü–û–î–ü–ò–°–ò –í–ù–ò–ó–£!
       myFoto = 'AgACAgIAAxkBAAIsTmDhiermX32mM6sx9K7d5RWQDCq4AAK9tjEbcfIJS4Eo5xK_1KtZAQADAgADeAADIAQ'
       media.attach_photo(myFoto, caption=myStr, parse_mode=ParseMode.HTML) # –ù—É–∂–Ω–æ –¥–ª—è –û–ë–©–ï–ô –ü–û–î–ü–ò–°–ò –í–ù–ò–ó–£!
       await message.answer_media_group(media=media) ### Done! Send media group
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

# –í—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É: [aiogram.utils.exceptions.TypeOfFileMismatch: Type of file mismatch]
#@dp.message_handler(lambda message: message.text == str(but36.text)) # but36 =('üîÆ') # VideoNote
#async def video_note(message: types.Message):
#    if PASS and str(message.chat.id) in str(ID):
#       path = myDir + '/data/Video/'
#       rez = os.listdir(path)
#       randNote = random.choice(rez)
#       print ('-------| ', randNote)
#       VideoNote = "BQACAgIAAxkBAAIg52DY5BOkGv-hp6H9zb9qmo4zKYtJAAL4DgAC0enJSvCJWVB3eGeaIAQ"
#       VideoNote = "BAACAgIAAxkBAAIhD2DZlftoFm3RsWD1Ljp7MS6WTpntAAKIDgACN_LISlGPr0FwMP1dIAQ"
#       VideoNote = "BAACAgIAAxkBAAIhFmDZlqAwxRL0kYUHDtzwwod4aVx3AAKKDgACN_LISuw__6Nmyzl9IAQ"
#       await message.answer_video_note(video_note=VideoNote) # –û—Ç–ø—Ä–∞–≤–∫–∞ VideoNote –ø–æ ID
#       myFile = path + randNote
#       await message.answer_video_note(path + randNote)
#       with open(myFile, 'rb') as File:
#          await bot.send_video_note(message.chat.id, File)
#    else:
#       return True




# –ù–ï –ü–û–®–õ–û - –ù–£–ñ–ù–û –ó–ù–ê–¢–¨, –ö–ê–ö –ó–ê–ü–£–°–ö–ê–¢–¨ [await bot.send_media_group(x,y,z)] = –ø–∞—Ä–∞–º–µ—Ç—Ä—ã???
#@dp.callback_query_handler(lambda c: c.data == '#Igroup') # CallbackQuery #('‚ô¶Ô∏è  Media Group ‚ô†Ô∏è', '#Igroup')  +++++ SEND FILES +++++
#async def media_group_btn(call: types.CallbackQuery):
#       await types.ChatActions.upload_photo() # Good bots should send chat actions
#       media = types.MediaGroup() # Create media group
#       path = myDir + '/data/Images'
#       rez = sorted(os.listdir(path))
#       for imgName in rez:
#          media.attach_photo(types.InputFile(myDir + '/data/Images/' + imgName), imgName.strip('.jpg')) # Attach local file
##       await message.answer_media_group(media=media) ### Done! Send media group
#       await bot.send_media_group(call.from_user.id, media=media) ### Done! Send media group

@dp.callback_query_handler(lambda c: c.data[0:2] == '#I') # –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö but31=('üì∑', '= Photos\n')   +++++ SEND FILES +++++
async def images_btn(call: types.CallbackQuery):
    if PASS and str(call.message.chat.id) in str(ID): # –í–ê–ñ–ù–û = call.message.chat.id !!!
       sName = call.data.strip('#I')
#       images_kb = await make_folder_kb('Images', '#I', 3, '.jpg') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
#       img = Image.open(myDir + '/data/Images/' + sName)
#       width = img.size[0]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É. –ú–µ—Ç–æ–¥ –¥–ª—è .JPG
#       height = img.size[1] # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É. –ú–µ—Ç–æ–¥ –¥–ª—è .JPG
#       iMsg = 'üì∑' + sName + ' üìê ' + str(width) + ' x ' + str(height)
#       await bot.send_photo(call.from_user.id, img, 'üì∑' + sName, parse_mode=ParseMode.MARKDOWN, reply_markup=images_kb)
#       Img = Image.open(myDir + '/data/Images/' + myName)
       myName = str(sName.strip())
       zDir = myDir + '/data/Images/' + myName
       Img = Image.open(zDir)
       Width = str(Img.size[0])  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É. –ú–µ—Ç–æ–¥ –¥–ª—è .JPG
       Height = str(Img.size[1])  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É. –ú–µ—Ç–æ–¥ –¥–ª—è .JPG
#       iMsg = 'üì∑' + myName + ' üìê<b>' + Width.strip() + 'x' + Height.strip() + '</b>' # –í—ã–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è [_] –≤ –∏–º–µ–Ω–∏, –∏–±–æ —Ä–∞–∑–º–µ—Ç–∫–∞ MARKDOWN!!!
       iMsg = 'üîò ' + myName + ' üìê<b>' + Width.strip() + 'x' + Height.strip() + '</b>' # –í—ã–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è [_] –≤ –∏–º–µ–Ω–∏, –∏–±–æ —Ä–∞–∑–º–µ—Ç–∫–∞ MARKDOWN!!!
       with open(zDir, 'rb') as img: # –í—ã–≤–æ–¥ –Ω–∞–¥–ø–∏—Å–∏ –ø–æ–¥ —Ä–∏—Å—É–Ω–∫–æ–º!!!
#       with open(myDir + '/data/Images/' + sName, 'rb') as img: # –í—ã–≤–æ–¥ –Ω–∞–¥–ø–∏—Å–∏ –ø–æ–¥ —Ä–∏—Å—É–Ω–∫–æ–º!!!
#          await bot.send_photo(call.from_user.id, img, iMsg, parse_mode=ParseMode.MARKDOWN_V2) # V2 –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å [.] –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
          await bot.send_photo(call.from_user.id, img, iMsg, parse_mode=ParseMode.HTML) # –í–ê–†–ò–ê–ù–¢ –ë–ï–ó –ó–ê–ì–†–£–ó–ö–ò KB
#          await bot.send_photo(call.from_user.id, img, iMsg) # –í–ê–†–ò–ê–ù–¢ –ë–ï–ó –ó–ê–ì–†–£–ó–ö–ò KB
       await bot.answer_callback_query(call.id, text=zDir) # &&&-----| –í–´–í–û–î–ò–¢ –í–†–ï–ú–ï–ù–ù–û –ö–û–†–û–¢–ö–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ù–ê –≠–ö–†–ê–ù!!! |------&&&
    else:
       return True



@dp.callback_query_handler(lambda c: c.data[0:2] == '#F') # –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö but34=('üìÇ', '= PDF/Docs\n')  +++++ SEND FILES +++++
async def pdf_document_btn(call: types.CallbackQuery):
    if PASS and str(call.message.chat.id) in str(ID): # –í–ê–ñ–ù–û = call.message.chat.id !!!
       sName = call.data.strip('#F')
#       iMsg = 'PDF: ' + str(sName)
       with open(myDir + '/data/PDF/' + sName, 'rb') as DOCs: #
          await bot.send_document(call.from_user.id, DOCs) # –í–ê–†–ò–ê–ù–¢ –ë–ï–ó –ó–ê–ì–†–£–ó–ö–ò KB
    else:
       return True


@dp.callback_query_handler(lambda c: c.data[0:2] == '#A') # –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö but32=('üéß', '= Sounds\n')   +++++ SEND FILES +++++
async def voice_btn(call: types.CallbackQuery): # –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ö–ù–û–ü–û–ö –í–ê–ñ–ù–û –ö–û–ù–¢–†–û–õ–ò–†–û–í–ê–¢–¨ –î–õ–ò–ù–ù–£ –§–ê–ô–õ–û–í !!!
    if PASS and str(call.message.chat.id) in str(ID): # –í–ê–ñ–ù–û = call.message.chat.id !!!
       today = datetime.now(tz)
       iDay = today.strftime("%d.%m.%Y")
       sName = call.data.strip('#A')
       myTit = sName.split('-')[0]
       myPerf = sName.partition('-')[2]
       myCap = 'üéº <b>' + iDay + '</b> üé∂'
       myThumb = open(myDir + '/data/flag.jpg', 'rb')
#       iMsg = 'PDF: ' + str(sName)
       with open(myDir + '/data/Voice/' + sName, 'rb') as File: # –ó–î–ï–°–¨ –õ–£–ß–®–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ò–ú–ï–ù–ù–û AUDIO –≤–º–µ—Å—Ç–æ VOICE!!!
          await bot.send_audio(call.from_user.id, File, caption=myCap, performer=myPerf, title=myTit, thumb=myThumb, parse_mode=ParseMode.HTML) # –í–ê–†–ò–ê–ù–¢ –ë–ï–ó –ó–ê–ì–†–£–ó–ö–ò KB
       myThumb.close()
    else:
       return True


@dp.callback_query_handler(lambda c: c.data[0:2] == '#V') # –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö VIDEO!!!   +++++ SEND FILES +++++
async def video_btn(call: types.CallbackQuery): # –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ö–ù–û–ü–û–ö –í–ê–ñ–ù–û –ö–û–ù–¢–†–û–õ–ò–†–û–í–ê–¢–¨ –î–õ–ò–ù–ù–£ –§–ê–ô–õ–û–í !!!
    if PASS and str(call.message.chat.id) in str(ID): # –í–ê–ñ–ù–û = call.message.chat.id !!!
       today = datetime.now(tz)
       iDay = today.strftime("%y-%m-%d")
       sName = call.data.strip('#V')
#       myTit = sName.split('-')[0]
#       myPerf = sName.partition('-')[2]
#       myCap = 'üéº <b>' + iDay + '</b> üé∂'
#       myThumb = open(myDir + '/data/flag.jpg', 'rb')
#       iMsg = 'PDF: ' + str(sName)
       myFile = myDir + '/data/Video/' + sName
#       vid = cv2.VideoCapture(myFile)
#       height = vid.get(cv2.CAP_PROP_FRAME_HEIGHT)
#       width = vid.get(cv2.CAP_PROP_FRAME_WIDTH)
       iMsg = 'üîò ' + sName
       with open(myFile, 'rb') as File:
          await bot.send_video(call.from_user.id, File, caption=iMsg)
#       with open(myDir + '/data/Video/' + sName, 'rb') as File: #
#          await bot.send_video(call.from_user.id, File) #
#       myThumb.close()
    else:
       return True

#import cv2
#file_path = "./video.avi"
#vid = cv2.VideoCapture( file_path )
#height = vid.get(cv2.CAP_PROP_FRAME_HEIGHT)
#width = vid.get(cv2.CAP_PROP_FRAME_WIDTH)


# SEND FILES ----------------]



# [4] ---------- HELP & TIPs --------------]
@dp.message_handler(lambda message: message.text == str(but41.text)) # but41=('üêßlinux')   +++++ HELP & TIPs +++++
async def help_menu_linux(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
       iMsg = 'üêß Linux Manuals {' + iTime + '}'
       linux_help_kb = await make_folder_kb('linux', '#L', 2, '.txt') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=linux_help_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


async def make_folder_kb(Folder, Symb, Width, Mime): # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ—Ñ—Ç–∞ —á—Ç–µ–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ # but41=('üêßlinux') KEYBOARD ‚å®Ô∏è
##    ls = subprocess.Popen(["ls", "-p", "."], stdout=subprocess.PIPE)                        # define the ls command
#    ls = subprocess.Popen(["ls", myDir + "/data/" + Folder], stdout=subprocess.PIPE)         # define the ls command
#    grep = subprocess.Popen(["grep", "-v", "/$"], stdin=ls.stdout, stdout=subprocess.PIPE)  # define the grep command
#    endOfPipe = grep.stdout                                # read from the end of the pipe (stdout)
#    print (endOfPipe) # –ú–µ—Ç–æ–¥ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π = –¥–∞–µ—Ç –∫–æ—Å—è–∫–∏ [b'basic.txt']
#    for line in endOfPipe:                                 # output the files line by line
#        print (line.strip()) # = [b'basic.txt']??
#
    my_new_kb = types.InlineKeyboardMarkup(row_width=Width)  # –§–û–†–ú–ò–†–£–ï–ú –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ
    myRow = []
    path = myDir + "/data/" + Folder
    rez = sorted(os.listdir(path))
    for item in rez:
        btn = str(item.strip())
#        my_text = '‚úèÔ∏è ' + btn.strip('.txt')
        my_text = 'üìì ' + btn.strip(Mime)
        my_data = Symb + btn # !!! –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ - –≤—ã–¥–∞–µ—Ç –û–®–ò–ë–ö–£!!!
        myRow.append(types.InlineKeyboardButton(my_text, callback_data=my_data))
#        my_linux_kb.row(types.InlineKeyboardButton(my_text, callback_data=my_data)) # –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    my_new_kb.add(*myRow)
    return my_new_kb


@dp.message_handler(lambda message: message.text == str(but42.text)) # but42=('üíé t_me')   +++++ HELP & TIPs +++++
async def help_menu_t_me(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       await message.answer(about_tme, parse_mode=ParseMode.HTML, reply_markup=kb_help_menu, disable_web_page_preview=True)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but43.text)) # but43=('üì∫dlna')   +++++ HELP & TIPs +++++
async def help_menu_dlna(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       with open(myDir + '/data/dlna.jpg', 'rb') as img:
#          await message.answer_photo(img)
#       await message.answer(about_dlna, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_help_menu)
          await message.answer_photo(img, about_dlna, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_dlna_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but44.text)) # but44=('üëÆ jobs')   +++++ HELP & TIPs +++++
async def help_menu_jobs(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       with open(myDir + '/data/00.jpg', 'rb') as img: # –í—ã–≤–æ–¥ –Ω–∞–¥–ø–∏—Å–∏ –ø–æ–¥ —Ä–∏—Å—É–Ω–∫–æ–º!!!
          await message.answer_photo(img, about_jobs, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_help_menu)
#          await message.answer_photo(img) # –†–∞–Ω—å—à–µ —ç—Ç–∏ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –ø–∞—Ä–µ, –Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–ª–∏
#       await message.answer(about_jobs, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_help_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but45.text)) # but45=('üì∞ news')   +++++ HELP & TIPs +++++
async def help_menu_news(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       await message.answer(about_news, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_help_menu, disable_web_page_preview=True)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but46.text)) # but46=('üìé links')   +++++ HELP & TIPs +++++
async def help_menu_links(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       await message.answer(about_links, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_help_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but47.text)) # but47=('üõ†tools')   +++++ HELP & TIPs +++++
async def help_menu_others(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
#       await message.answer(about_others, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_help_menu)
       with open(myDir + '/data/00.jpg', 'rb') as img: # –í—ã–≤–æ–¥ –Ω–∞–¥–ø–∏—Å–∏ –ø–æ–¥ —Ä–∏—Å—É–Ω–∫–æ–º!!!
          await message.answer_photo(img, about_others, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_help_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(commands=['my_mems']) # –í—ã–∑–æ–≤ –®–ü–ê–†–ì–ê–õ–ö–ò (–≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫) –∏–∑ –ú–µ–Ω—é –ö–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: message.text == str(but48.text)) # but48=('üóÑfiles')   +++++ HELP & TIPs +++++
async def help_menu_file(message: types.Message):
    global iNum
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iT = today.strftime("%M%S")
       with open(myDir + '/data/files.json') as json_file:
          data = json.load(json_file)
          iMax = len(data['image']) # –ø–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ JSON
          iNum = random.randint(0, iMax-1)
          Str = data['image'][iNum]['about']
          id = data['image'][iNum]['id']
          file_id = data['image'][iNum]['file_id']
#       iMsg = '–í—Å–µ–≥–æ: ' + str(iMax) + '\n–ù–æ–º–µ—Ä: ' + str(iNum+1) + '\nüîò ' + Str # Good Test!!!
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=job_files_menu)
#       iMsg = 'üîò <code>' + Str + '</code>'
       iMsg = '‚öìÔ∏è –®–ø–∞—Ä–≥–∞–ª–∫–∞ —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏'
       job_files_menu = types.InlineKeyboardMarkup(row_width=3)
#          ('‚è™start', '#JS' + iT), ('LIST', '#JA' + iT), ('‚è©end', '#JE' + iT),
       text_and_data = (
          ('< LEFT ‚èÆ', '#JL' + iT), (id, '#JAM' + id + iT), ('‚è≠ RIGHT >', '#JR' + iT),
          ('‚óè START ‚è™', '#JS' + iT), (' ‚è© END ‚óè', '#JE' + iT),
       )                                            # ====| –ü—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –®–ò–†–ò–ù–´ –ö–ê–†–¢–ò–ù–û–ö
#       iBtn = '====================================++++++++++'
       iBtn = 'üîò ' + Str + ' {' + data['image'][iNum]['file_name'] + '}'
       job_files_menu.add(types.InlineKeyboardButton(text=iBtn, callback_data='#JAR' + iT))
       row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
       job_files_menu.add(*row_btns)
       await message.answer_photo(file_id, caption=iMsg, parse_mode=ParseMode.HTML, reply_markup=job_files_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


#@dp.callback_query_handler(lambda c: c.data[0:3] == '#JA') # –û–ë–†–ê–ë–û–¢–ß–ò–ö +++ RANDOM +++++ HELP & TIPs +++++
@dp.callback_query_handler(lambda c: c.data[0:2] == '#J') # –û–ë–†–ê–ë–û–¢–ß–ò–ö +++ RANDOM +++++ HELP & TIPs +++++
async def file_list_btn(call: types.CallbackQuery):
    global iNum
    today = datetime.now(tz)
    iT = today.strftime("%M%S")
    with open(myDir + '/data/files.json') as json_file:
       data = json.load(json_file)
       iMax = len(data['image']) # –ø–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ JSON
       if call.data[0:4] == '#JAR':
          iNum = random.randint(0, iMax-1)
       elif call.data[0:4] == '#JAM':
          iNum = iMax//2 # –î–µ–ª–µ–Ω–∏–µ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –∏–ª–∏ # iNum = round(iMax/2-1)
       elif call.data[0:3] == '#JS':
          iNum = 0
       elif call.data[0:3] == '#JE':
          iNum = iMax-1
       elif call.data[0:3] == '#JL':
          iNum = iNum-1
       elif call.data[0:3] == '#JR':
          if iNum == iMax-1:
             iNum = 0
          else:
             iNum = iNum+1
       Str = data['image'][iNum]['about']
       id = data['image'][iNum]['id']
       file_id = data['image'][iNum]['file_id']
    iMsg = 'üîò <code>' + Str + '</code>'
    job_files_menu = types.InlineKeyboardMarkup(row_width=3)
#       ('‚èÆleft', '#JL' + iT), (id, '#J' + id + iT), ('‚è≠right', '#JR' + iT),
#       ('‚è™start', '#JS' + iT), ('LIST', '#JA' + iT), ('‚è©end', '#JE' + iT),
    text_and_data = (
       ('< LEFT ‚èÆ', '#JL' + iT), (id, '#JAM' + id + iT), ('‚è≠ RIGHT >', '#JR' + iT),
       ('‚óè START ‚è™', '#JS' + iT), (' ‚è© END ‚óè', '#JE' + iT),
    )
#    iBtn = '====================================++++++++++'
#    iBtn = 'üîò ' + Str
    iBtn = 'üîò ' + Str + ' {' + data['image'][iNum]['file_name'] + '}'
    job_files_menu.add(types.InlineKeyboardButton(text=iBtn, callback_data='#JAR' + iT))
#    job_files_menu.add(types.InlineKeyboardButton(text='====================================++++++++++', callback_data='#JAR' + iT))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    job_files_menu.add(*row_btns)
#    await bot.edit_message_media(call.id, InputMediaPhoto(file_id)) # VER.1
#    await bot.edit_message_media(call.from_user.id, call.message.message_id, InputMediaPhoto(file_id))
#
# ---| –ü–û–õ–£–ß–ò–õ–ê–°–¨ –ü–†–´–ì–ê–Æ–©–ê–Ø –†–ê–ë–û–ß–ê–Ø –°–•–ï–ú–ê 8-) # VER.2
#    await bot.edit_message_media(media=photo_media, chat_id=call.message.chat.id, message_id=call.message.message_id)
#    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id, reply_markup=job_files_menu)
#
    photo_media = InputMediaPhoto(file_id) # VER.3 –ú–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞!
    await bot.edit_message_media(media=photo_media, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=job_files_menu)



@dp.callback_query_handler(lambda c: c.data[0:2] == '#L') # –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö LINUX MANUALS  +++++ HELP & TIPs +++++
async def linux_help_btn(call: types.CallbackQuery):
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    sName = call.data.strip('#L')
#    print(sName)
#    iMsg = '+++ –ù–∞–∂–∞—Ç–∞ ' + str(sName.strip()) + ' –∫–Ω–æ–ø–∫–∞'
#    with open(myDir + '/data/linux/' + sName, 'r') as file1:
    zDir = myDir + '/data/linux/' + sName
    with open(zDir, 'r') as file1:
       iManual = file1.read()
    iMsg = 'üêß*' + str(sName.strip('.txt')) + '* {' + iTime + '} \n++++++++++++++++++++++\n' + iManual
    linux_help_kb = await make_folder_kb('linux', '#L', 2, '.txt') # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=linux_help_kb)
    await bot.answer_callback_query(call.id, text=zDir) # &&&-----| –í–´–í–û–î–ò–¢ –í–†–ï–ú–ï–ù–ù–û –ö–û–†–û–¢–ö–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ù–ê –≠–ö–†–ê–ù!!! |------&&&

# End HELP & TIPs -------------------------]



# [5] ---------- SMART HOUSE --------------]
@dp.message_handler(lambda message: message.text == str(but50.text)) # but50=('üå°üìà')   +++++ SMART HOUSE +++++
async def cpu_temp(message: types.Message): # –ü—Ä–æ—Ç–æ—Ç–∏–ø —Ä–∞–±–æ—Ç–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –í–´–í–û–î–ê –ì–†–ê–§–ò–ö–ê –¶–ü–£ –º–µ—Ç–æ–¥–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    if PASS and str(message.chat.id) in str(ID):
       iMsg = 'üå° CPU Temp: <b>43.8 ‚ÑÉ </b>'
       with open(myDir + '/data/grafik.jpg', 'rb') as img: # –í—ã–≤–æ–¥ –Ω–∞–¥–ø–∏—Å–∏ –ø–æ–¥ —Ä–∏—Å—É–Ω–∫–æ–º!!!
          await message.answer_photo(img, iMsg, parse_mode=ParseMode.HTML, reply_markup=kb_smart_menu)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but94.text)) # ('üíä') # –ê–ø—Ç–µ—á–∫–∞ –≤ –¥–æ—Ä–æ–≥—É
async def apteka_btn(message: types.Message): # –ê–Ω–∞–ª–æ–≥ –≤—ã–≤–æ–¥–∞ —Ä–∞–±–æ—á–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–∑ –ø–∞–º—è—Ç–∏
#    if PASS and str(message.chat.id) in str(ID):
#       media = types.MediaGroup() # Create media group
       today = datetime.now(tz)
       iT = today.strftime("%M%S")
       with open(myDir + '/data/apteka.json') as json_file:
          data = json.load(json_file)
          iMax = len(data['apteka']) # –ø–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ JSON
          iNum = random.randint(0, iMax-1)
          Str = data['apteka'][iNum]['about']
          id = data['apteka'][iNum]['id']
          file_id = data['apteka'][iNum]['file_id']
          fSize = data['apteka'][iNum]['file_size']
#       iMsg = 'üîò <code>' + Str + '</code> [<b>' + str(iNum+1) + '</b>]'
#       iMsg = 'üîò <code>' + Str + '</code>&#10;' + id + ' [<b>' + fSize + '</b>] {' + today.strftime("%d-%m-%Y_%H:%M") + '}'
       iMsg = 'üîò <code>' + Str + '</code>'
       dopInfo = '=' + id + '= —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö: [' + fSize + '] {' + today.strftime("%d-%m-%Y_%H:%M") + '}'
       apteka_menu = types.InlineKeyboardMarkup(row_width=7)
       text_and_data = (
          ('1Ô∏è‚É£', '#E1' + iT), ('2Ô∏è‚É£', '#E2' + iT), ('3Ô∏è‚É£', '#E3' + iT), ('4Ô∏è‚É£', '#E4' + iT),
          ('5Ô∏è‚É£', '#E5' + iT), ('6Ô∏è‚É£', '#E6' + iT), ('7Ô∏è‚É£', '#E7' + iT),
       )
       apteka_menu.add(types.InlineKeyboardButton(text=dopInfo, callback_data='#E0'))
       row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
       apteka_menu.add(*row_btns)
       await message.answer_photo(file_id, caption=iMsg, parse_mode=ParseMode.HTML, reply_markup=apteka_menu) # GOOD!! –Ω–æ –ø—Ä–∞–≤–∏—Ç—å –ª—É—á—à–µ MtdiaGroup
#       media.attach_photo(file_id, caption=iMsg, parse_mode=ParseMode.HTML) # –ù—É–∂–Ω–æ –¥–ª—è –û–ë–©–ï–ô –ü–û–î–ü–ò–°–ò –í–ù–ò–ó–£!
#       await message.answer_media_group(media=media) ### Done! Send media group = NO reply_markup!!!
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
#    else:
#       return True


@dp.callback_query_handler(lambda c: c.data[0:2] == '#E') # –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö [1-7] –ü–û–î –ö–ê–†–¢–ò–ù–ö–ê–ú–ò apteka
async def apteka_btn(call: types.CallbackQuery):
#    if PASS and str(call.message.chat.id) in str(ID): # –í–ê–ñ–ù–û = call.message.chat.id !!!
       today = datetime.now(tz)
       iT = today.strftime("%M%S")
#       sName = call.data.strip('#E')
#       iNum = int(sName.strip())-1
       if call.data[2] == '0':
          iNum = random.randint(0,6)
       else:
          iNum = int(call.data[2])-1
#       print ('mems &&&&===| ', call.data[2], ' = ', iNum) # ?! –ë—ã–ª–∞ –ø–ª–∞–≤–∞—é—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å 0 –∞–¥—Ä–µ—Å–æ–º (—Ç.–µ. iNum=1-1)?!
       with open(myDir + '/data/apteka.json') as json_file:
          data = json.load(json_file)
          Str = data['apteka'][iNum]['about']
          id = data['apteka'][iNum]['id']
          file_id = data['apteka'][iNum]['file_id']
          fSize = data['apteka'][iNum]['file_size']
#       iMsg = 'üîò <code>' + Str + '</code> [<b>' + str(iNum+1) + '</b>]'
#       iMsg = 'üîò <code>' + Str + '</code>&#10;' + id + ' [<b>' + fSize + '</b>] {' + today.strftime("%d-%m-%Y_%H:%M") + '}'
       iMsg = 'üîò <code>' + Str + '</code>'
       dopInfo = '=' + id + '= —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö: [' + fSize + '] {' + today.strftime("%d-%m-%Y_%H:%M") + '}'
       apteka_menu = types.InlineKeyboardMarkup(row_width=7)
       text_and_data = (
          ('1Ô∏è‚É£', '#E1' + iT), ('2Ô∏è‚É£', '#E2' + iT), ('3Ô∏è‚É£', '#E3' + iT), ('4Ô∏è‚É£', '#E4' + iT),
          ('5Ô∏è‚É£', '#E5' + iT), ('6Ô∏è‚É£', '#E6' + iT), ('7Ô∏è‚É£', '#E7' + iT),
       )
       apteka_menu.add(types.InlineKeyboardButton(text=dopInfo, callback_data='#E0'))
       row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
       apteka_menu.add(*row_btns)
#       media = types.MediaGroup() # Create media group # –ù–ï –ü–û–®–õ–û!!!
#       print ('XZ =====|| ', media) # –í—ã–¥–∞–µ—Ç [] –ø—É—Å—Ç–æ—Ç—É
#       media.attach_photo(file_id, caption=iMsg, parse_mode=ParseMode.HTML) # –ù—É–∂–Ω–æ –¥–ª—è –û–ë–©–ï–ô –ü–û–î–ü–ò–°–ò –í–ù–ò–ó–£! –ù–ï –ü–û–®–õ–û!!!
#       await bot.edit_message_media(media=media, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=apteka_menu) # BAD!
       myMedia=InputMediaPhoto(file_id, caption=iMsg, parse_mode=ParseMode.HTML)
#       myMedia=InputMediaPhoto(file_id) # –í–°–ï –û–¢–õ–ò–ß–ù–û, –ù–û –¢–û–õ–¨–ö–û –ö–ê–†–¢–ò–ù–ö–ê!
       await bot.edit_message_media(media=myMedia, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=apteka_menu)
#    else:
#       return True




@dp.message_handler(commands=['weather24']) # –í—ã–≤–æ–¥ –ü—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 24 —á–∞—Å–∞ –∏–∑ –ú–µ–Ω—é –ö–æ–º–∞–Ω–¥
@dp.message_handler(lambda message: message.text == str(but95.text)) # but95=('üå¶–ø–æ–≥–æ–¥–∞')   +++++ SMART HOUSE +++++
async def weather_moscow(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/usr/bin/python3', myDir + '/scripts/10_weather_mos.py']) # –•–æ—Ä–æ—à–∏–π —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
       with open(myDir + '/scripts/moscow.txt', 'r') as file1:
          iMsg = file1.read()
#       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_tips_menu)
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but96.text)) # ('üì∏ipCam') # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å IP-Cam
async def ipcam_btn(message: types.Message):
#    subprocess.call(['/bin/bash', myDir + '/scripts/ip_cam.sh']) # –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É IP-Cam = —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä
    today = datetime.now(tz)
    iDay = today.strftime("%y-%m-%d_%H:%M")
    iMsg = 'üîò —Ñ–æ—Ç–æ —Å ip-cam [<b>' + str(iDay) + '</b>]'
    if PASS and str(message.chat.id) in str(ID):
       with open(myDir + '/data/10.jpg', 'rb') as img: # –í—ã–≤–æ–¥ –Ω–∞–¥–ø–∏—Å–∏ –ø–æ–¥ –∫–∞–¥—Ä–æ–º —Å –∫–∞–º–µ—Ä—ã (–∏–ª–∏ default img)
          await message.answer_photo(img, iMsg, parse_mode=ParseMode.HTML, reply_markup=kb_tips_menu)
       time.sleep(2) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



@dp.message_handler(lambda message: message.text == str(but97.text)) # but97=('—Ä–æ–±–æ—Ç')   +++++ SMART HOUSE +++++
async def robot_menu(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       btn_robot_kb = types.InlineKeyboardMarkup(row_width=3, size=2)
       text_and_data = (
          ('Ô∏èüïû Timer', '#Rtimer'), ('‚¨Ü FORWARDÔ∏è', '#Rforward'), ('üîé Search', '#Rsearch'),
          ('‚¨Ö LEFTÔ∏èÔ∏è', '#Rleft'), ('‚ò¢ TURNÔ∏è', '#Rturn'), ('RIGHT ‚û°Ô∏è', '#Rright'),
          ('üì£ Sound', '#Rsound'), ('‚¨áÔ∏è BACKWARD', '#Rbackward'), ('üì∏ Image', '#Rimage'),
       )
       row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
#       btn_robot_kb.row(*row_btns) # –≤—Å–µ –≤ –æ–¥–∏–Ω —Ä—è–¥ –≤—ã—Å—Ç—Ä–æ–∏–ª–∏—Å—å (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ)
       btn_robot_kb.add(*row_btns)
       iMsg = 'üìó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ü§ñ:\n‚¨ÖÔ∏èÔ∏è –≤–ª–µ–≤–æ    ‚û°Ô∏è –≤–ø—Ä–∞–≤–æ\n‚¨ÜÔ∏è –≤–ø–µ—Ä–µ–¥   ‚¨áÔ∏è –Ω–∞–∑–∞–¥\n*.. –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ* ‚ö°'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=btn_robot_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but92.text)) # but92=('üÜî–¢–µ–ª–µ–≥—Ä–∞–º')   +++++ SMART HOUSE +++++
async def tme_id(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       await message.answer_dice(emoji="üé≤")
       iMsg = '–†–∞–±–æ—Ç–∞—é—â–∏–π –∑–¥–µ—Å—å Telegram ID: *[' + str(message.chat.id) + ']*'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(commands=['games24']) # –ó–∞–ø—É—Å–∫ –∏–∑ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == str(but58.text)) # ('–∏–≥—Ä—ã')   +++++ SMART HOUSE +++++
async def games_menu(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       Link1 = 'https://yandex.ru/games/play/101956/?app-id=101956&utm_medium=search&utm_source=yandex&utm_campaign=rus_games_general-igra-bezkav_desk_yandex_search_460.new%7C59207592&utm_term=%D0%B8%D0%B3%D1%80%D0%B0%20%D0%B2%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B5%20%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%BD%D1%8B%D0%B5#app-id=101956&catalog-session-uid=catalog-274bb297-920c-502f-86f8-72a4b664c7cd-1626092089129-6c0e&rtx-reqid=4123413581283176182&pos=%7B%22listType%22%3A%22categorized%22%2C%22tabCategory%22%3A%22common%22%7D'
       Link2 = 'https://yandex.ru/games/play/98912/?app-id=98912&utm_source=game_popup_menu#app-id=98912&catalog-session-uid=catalog-bb9b98af-4099-53bf-a9c7-1abb15a4c939-1626176775063-7cb5&rtx-reqid=2316179384837023145&pos=%7B%22listType%22%3A%22suggested%22%2C%22tabCategory%22%3A%22common%22%7D'
       today = datetime.now(tz)
       iT = today.strftime("%M%S")
#       games_kb = types.InlineKeyboardMarkup(row_width=7, size=2)
       games_kb = types.InlineKeyboardMarkup(row_width=7) # —Ñ—É—Ç–±–æ–ª –±–∞—Å–∫–µ—Ç–±–æ–ª –∞–≤—Ç–æ–º–∞—Ç –±–æ—É–ª–∏–Ω–≥ –¥–∞—Ä—Ç—Å dice
       text_and_data = (
          ('‚öΩÔ∏è', '#Y‚öΩÔ∏è' + iT), ('üèÄ', '#YüèÄ' + iT), ('üé∞', '#Yüé∞' + iT), ('üé≥', '#Yüé≥' + iT),
          ('üéØ', '#YüéØ' + iT), ('üé≤', '#Yüé≤' + iT), ('.üèÜ.', '#Y0' + iT),
          ('üöÇTrain', '#Y1' +iT), ('Matrix', '#Y2' +iT), ('üî•aFire', '#Y3' +iT), ('‚òØ–°—É–¥—å–±–∞', '#Y4' +iT),
       )
       row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
       games_kb.add(*row_btns)
       games_kb.add(types.InlineKeyboardButton('‚ôü–®–∞—à–∫–∏', url=Link1))
       games_kb.insert(types.InlineKeyboardButton('–ú–æ—Ä—Å–∫–æ–π –ë–æ–πüî´', url=Link2))
       iMsg = 'ü§™' # crazy face
       msg = await message.answer(iMsg)
       time.sleep(2) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       iMsg = '–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é <b>–£–¥–∞—á—É</b> ‚úåÔ∏è'
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=games_kb)
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
       await msg.delete() # –£–¥–∞–ª—è–µ–º –ø—Ä—ã–≥–∞—é—â—É—é –†–û–ñ–£) = crazy face
    else:
       return True



@dp.callback_query_handler(lambda c: c.data[0:2] == '#Y') # –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö...
async def dice_btn(call: types.CallbackQuery):
  if PASS:
    Link1 = 'https://yandex.ru/games/play/101956/?app-id=101956&utm_medium=search&utm_source=yandex&utm_campaign=rus_games_general-igra-bezkav_desk_yandex_search_460.new%7C59207592&utm_term=%D0%B8%D0%B3%D1%80%D0%B0%20%D0%B2%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B5%20%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%BD%D1%8B%D0%B5#app-id=101956&catalog-session-uid=catalog-274bb297-920c-502f-86f8-72a4b664c7cd-1626092089129-6c0e&rtx-reqid=4123413581283176182&pos=%7B%22listType%22%3A%22categorized%22%2C%22tabCategory%22%3A%22common%22%7D'
    Link2 = 'https://yandex.ru/games/play/98912/?app-id=98912&utm_source=game_popup_menu#app-id=98912&catalog-session-uid=catalog-bb9b98af-4099-53bf-a9c7-1abb15a4c939-1626176775063-7cb5&rtx-reqid=2316179384837023145&pos=%7B%22listType%22%3A%22suggested%22%2C%22tabCategory%22%3A%22common%22%7D'
    today = datetime.now(tz)
    iT = today.strftime("%M%S")
    iDay = today.strftime("%d-%m-%y")
    iTime = today.strftime("%H:%M:%S")
    games_kb = types.InlineKeyboardMarkup(row_width=7)
    text_and_data = (
       ('‚öΩÔ∏è', '#Y‚öΩÔ∏è' + iT), ('üèÄ', '#YüèÄ' + iT), ('üé∞', '#Yüé∞' + iT), ('üé≥', '#Yüé≥' + iT),
       ('üéØ', '#YüéØ' + iT), ('üé≤', '#Yüé≤' + iT), ('.üèÜ.', '#Y0' + iT),
       ('üöÇTrain', '#Y1' +iT), ('Matrix', '#Y2' +iT), ('üî•aFire', '#Y3' +iT), ('‚òØ–°—É–¥—å–±–∞', '#Y4' +iT),
    )
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    games_kb.add(*row_btns)
    games_kb.add(types.InlineKeyboardButton('‚ôü–®–∞—à–∫–∏', url=Link1))
    games_kb.insert(types.InlineKeyboardButton('–ú–æ—Ä—Å–∫–æ–π –ë–æ–πüî´', url=Link2))
#    iMsg = '–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é <b>–£–¥–∞—á—É</b> ‚úåÔ∏è'
#    iSH = {'train':'games_train.sh', 'matrix':'games_matrix.sh', 'xx':'games_xx.sh', 'yy':'games_yy.sh'}
#    msg = {'train':'üöÇ <b>–ü–æ–µ–∑–¥ –¢—É-—Ç—É..</b>', 'matrix':'üï∑', 'xx':'‚ö°Ô∏è', 'yy':'‚òÉÔ∏è'}
    iSH = {'1':'games_train.sh', '2':'games_matrix.sh', '3':'games_fire.sh', '4':'games_fortune.sh'}
    msg = {'1':'üöÇ <b>–ü–æ–µ–∑–¥ –¢—É-—Ç—É..</b>', '2':'üï∑', '3':'‚ö°Ô∏è', '4':'‚òÉÔ∏è'}
    iGame = call.data[2]
    if iGame in ('1', '2', '3'): # 'üöÇtrain', 'matrix', 'aFire'
#       iMsg = 'üöÇ <b>–ü–æ–µ–∑–¥ –¢—É-—Ç—É..</b>'
       iMsg = msg[iGame]
       await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=games_kb)
       subprocess.call(['/bin/bash', myDir + '/scripts/' + iSH[iGame]]) # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å —à—é—Ç–∫–æ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
#    elif iGame == '3':
#       Link = 'https://yandex.ru/games/play/101956/?app-id=101956&utm_medium=search&utm_source=yandex&utm_campaign=rus_games_general-igra-bezkav_desk_yandex_search_460.new%7C59207592&utm_term=%D0%B8%D0%B3%D1%80%D0%B0%20%D0%B2%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B5%20%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%BD%D1%8B%D0%B5#app-id=101956&catalog-session-uid=catalog-274bb297-920c-502f-86f8-72a4b664c7cd-1626092089129-6c0e&rtx-reqid=4123413581283176182&pos=%7B%22listType%22%3A%22categorized%22%2C%22tabCategory%22%3A%22common%22%7D'
#       iMsg = '‚ôü <a href="' + Link + '">–®–ê–®–ö–ò –≤ –ë–†–ê–£–ó–ï–†–ï</a>'
#       await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=games_kb)
    elif iGame == '4':
#       subprocess.call(['/bin/bash', myDir + '/scripts/games_fortune.sh']) # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å —à—é—Ç–∫–æ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
       subprocess.call(['/bin/bash', myDir + '/scripts/' + iSH[iGame]]) # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å —à—é—Ç–∫–æ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
       with open(myDir + '/scripts/fortune.txt', 'r') as file:
          data = file.read()
       iMsg = '‚òØÔ∏è <b>–ì–ª–∞—Å –§–æ—Ä—Ç—É–Ω—ã</b> ‚öõÔ∏è\n' + data
       await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=games_kb)
#       time.sleep(10)
#       subprocess.call(['/bin/bash', myDir + '/scripts/kill_proc.sh', 'sm'])
       asyncio.create_task(clean_screen(15))
    elif iGame == '0':
       with open(myDir + '/data/dice.txt', 'r') as file:
#          data = file.readlines()[-10:]
#          iMsg = '‚õ≥ <b>–ö–æ–ª-–≤–æ –û–ß–ö–û–í:</b>&#10;' + str(data)
          data = file.readlines()
          tail = data[-10:]
          iMsg = '‚õ≥ <b>–ö–æ–ª-–≤–æ –û–ß–ö–û–í:</b>&#10;' + ''.join(tail)
       await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=games_kb)
    else: # –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤—Å–µ –∏–≥—Ä—ã —Ç–∏–ø–∞ Dice
       await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id) # !!! —ç—Ç–æ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
       msg = await bot.send_dice(emoji=iGame, chat_id=call.from_user.id)
       time.sleep(3)
       iVal = str(msg.dice.value) # –ö–æ–ª-–≤–æ –æ—á–∫–æ–≤ (–≤–µ–∑–¥–µ –¥–æ 6, –≤ —Ä—É–ª–µ—Ç–∫—É - –¥–æ 64)
       with open(myDir + '/data/dice.txt', 'a') as file: # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç–µ [w]=–æ–±–Ω—É–ª—è–µ—Ç –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞!
          file.write('<b>' + iDay + '</b>_' + iTime + '  ' + iGame + ' <b>' + iVal + '</b>\n')
       iMsg = '‚õ≥Ô∏è <b>–ö–æ–ª-–≤–æ –û–ß–ö–û–í:  ' + iVal + ' ' + iGame + '</b>'
       CID = str(call['from']['id'])
       msg = await bot.send_message(chat_id=CID, text=iMsg, parse_mode=ParseMode.HTML) # str(call['from']['id']) !!!===@@@===!!!
       time.sleep(2)
       await games_menu(msg) # –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ò–Ω–ª–∞–π–Ω-–ö–Ω–æ–ø–æ–∫ –ü—Ä–∏–Ω—É–¥–∏—Ç–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –ú–ï–ù–Æ –ø–æ–¥ DICE
#       await games_menu(call.message) # –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ò–Ω–ª–∞–π–Ω-–ö–Ω–æ–ø–æ–∫ –ü—Ä–∏–Ω—É–¥–∏—Ç–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –ú–ï–ù–Æ –ø–æ–¥ DICE
# —Ç–µ—Å—Ç—ã:
#    await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=games_kb) # –ù–ï –Ø–°–ï–ù –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–ë–û–¢–´)
#    await bot.edit_message_text(iGame, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=games_kb)
#    await bot.edit_message_dice(emoji=iGame, call.from_user.id, call.message.message_id, reply_markup=games_kb)
#    iGame = call.data.strip('#Y')
#    print ('--------| ', call.message)   # msg_id = call.message.message_id
#    print ('--------| ', msg.dice.value) # –ü–µ—á–∞—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ –≤—ã–ø–∞–≤—à–∏—Ö –æ—á–∫–æ–≤ (–¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ max=64)
#    time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id) # !!! —ç—Ç–æ —É–¥–∞–ª—è–µ—Ç —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
#    await bot.delete_message(chat_id=call.from_user.id, message_id=msg.message_id) # !!! –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–∞–º Dice
#    await msg.delete() # –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å!
#    await asyncio.create_task(delete_message(msg, 5)) # –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å! –°–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã!
  else:
    return True



@dp.message_handler(lambda message: message.text == str(but51.text)) # ('üö∞üõÅ')
@dp.message_handler(lambda message: message.text == str(but52.text)) # ('üîå')
@dp.message_handler(lambda message: message.text == str(but53.text)) # ('üí°')
@dp.message_handler(lambda message: message.text == str(but54.text)) # ('üîê')
@dp.message_handler(lambda message: message.text == str(but55.text)) # ('üè†–æ–∫–Ω–∞')
@dp.message_handler(lambda message: message.text == str(but56.text)) # ('üö™–¥–≤–µ—Ä–∏')
@dp.message_handler(lambda message: message.text == str(but57.text)) # ('‚ö°—Ä–µ–ª–µ')
async def time_btn(message: types.Message):
   if PASS:
      time.sleep(3) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
      return True
   else:
     return True

# End SMART HOUSE --------------]




# [6] ---------- SOFT --------------]
@dp.message_handler(lambda message: message.text == str(but12.text)) # but12=('üíæ Soft')   +++++ SOFT +++++
async def main_menu_programs(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
       my_soft_kb = await make_soft_kb() # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
       text_and_data = (('üü° START ALL', '#P1'), ('üí° MANUAL', '#P3'), ('üî¥ STOP ALL', '#P2'))
       row_btns = (types.InlineKeyboardButton(text, callback_data=data, resize_keyboard=True) for text, data in text_and_data) # –î–û–ë–ê–í–ò–õ RESIZE!!!
       my_soft_kb.row(*row_btns)
       iMsg = 'üìù –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è {' + iTime + '}'
#       with open(myDir + '/data/00.jpg', 'rb') as img: # –í—ã–≤–æ–¥ –Ω–∞–¥–ø–∏—Å–∏ –ø–æ–¥ —Ä–∏—Å—É–Ω–∫–æ–º!!!
#          await message.answer_photo(img, iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=my_soft_kb)
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=my_soft_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.callback_query_handler(lambda c: c.data == '#P0') # call = CallbackQuery üåêüåêüåê For button ('üìù LIST', '#P0')   +++++ SOFT +++++
async def list_soft_btn(call: types.CallbackQuery):
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    my_soft_kb = await make_soft_kb() # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
    text_and_data = (('üü° START ALL', '#P1'), ('üí° MANUAL', '#P3'), ('üî¥ STOP ALL', '#P2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data, resize_keyboard=True) for text, data in text_and_data)
    my_soft_kb.add(*row_btns)
    iMsg = 'üìù –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è {' + iTime + '}'
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_soft_kb)


async def make_soft_kb(): # –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ—Ñ—Ç–∞ —á—Ç–µ–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
    subprocess.call(['/bin/bash', myDir + '/scripts/soft_list.sh'])
    my_soft_kb = types.InlineKeyboardMarkup(row_width=3)
    file1 = open(myDir + '/scripts/list_all.txt', 'r') # –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    lines = file1.readlines() # —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    for line in lines: # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        if (line[0:2] == '1#'): # –µ—Å–ª–∏ —É–∂–µ –ó–ê–ü–£–©–ï–ù–û –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
           img = 'üü¢ Ô∏è'
        else:                   # –µ—Å–ª–∏ –µ—â–µ –ù–ï –ó–ê–ü–£–©–ï–ù–û –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
           img = '‚ö™ '
        my_text = img + line[2:]
        my_data = '#P' + line[2:] # !!! –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ - –≤—ã–¥–∞–µ—Ç –û–®–ò–ë–ö–£!!!
#        my_soft_kb.add(types.InlineKeyboardButton(my_text, callback_data=my_data))
        my_soft_kb.row(types.InlineKeyboardButton(my_text, callback_data=my_data))
    file1.close # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    return my_soft_kb


@dp.callback_query_handler(lambda c: c.data == '#P3') # call = CallbackQuery üåêüåêüåê For button ('üí° MANUAL', '#P3')   +++++ SOFT +++++
async def man_soft_btn(call: types.CallbackQuery):
    my_soft_kb = types.InlineKeyboardMarkup(row_width=3)
    text_and_data = (('üü° START ALL', '#P1'), ('üìù LIST', '#P0'), ('üî¥ STOP ALL', '#P2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    my_soft_kb.row(*row_btns)
    await bot.edit_message_text(help_soft, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_soft_kb)


@dp.callback_query_handler(lambda c: c.data == '#P1') # call = CallbackQuery üåêüåêüåê For button ('üü° START ALL', '#P1')   +++++ SOFT +++++
async def start_soft_btn(call: types.CallbackQuery):
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    subprocess.call(['/bin/bash', myDir + '/scripts/soft_start.sh'])
#    await bot.answer_callback_query(call.id, text='‚õë –í–°–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø\n–û–°–¢–ê–ù–û–í–õ–ï–ù–´! ‚õî', show_alert=True) # –î–æ–ø.—Å–º—Å –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω!
    my_soft_kb = await make_soft_kb() # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
    text_and_data = (('üü° START ALL', '#P1'), ('üí° MANUAL', '#P3'), ('üî¥ STOP ALL', '#P2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    my_soft_kb.add(*row_btns)
    iMsg = 'üìù –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è {' + iTime + '}'
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_soft_kb)

@dp.callback_query_handler(lambda c: c.data == '#P2') # call = CallbackQuery üåêüåêüåê For button ('üî¥ STOP ALL', '#P2')
async def stop_soft_btn(call: types.CallbackQuery):
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    subprocess.call(['/bin/bash', myDir + '/scripts/soft_stop.sh']) # –ó–ê–ü–£–°–ö–ê–ï–ú –û–°–¢–ê–ù–û–í –í–°–ï–• –ó–ê–ü–£–©–ï–ù–ù–´–• –ü–†–û–ì–†–ê–ú–ú –ü–û –°–ü–ò–°–ö–£
#    return True
    await bot.answer_callback_query(call.id, text='‚õë –í–°–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø\n–û–°–¢–ê–ù–û–í–õ–ï–ù–´! ‚õîÔ∏è', show_alert=False) # –î–æ–ø.—Å–º—Å –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω!
    my_soft_kb = await make_soft_kb() # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
    text_and_data = (('üü° START ALL', '#P1'), ('üí° MANUAL', '#P3'), ('üî¥ STOP ALL', '#P2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    my_soft_kb.add(*row_btns)
    iMsg = 'üìù –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è {' + iTime + '}'
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_soft_kb)


@dp.callback_query_handler(lambda c: c.data[0:2] == '#P') # call = CallbackQuery @ TRIGGER For All SOFT button   +++++ SOFT +++++
async def triger_soft_btn(call: types.CallbackQuery):
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    sName = call.data.strip('#P')
    subprocess.call(['/bin/bash', myDir + '/scripts/soft_triger.sh', sName.strip()])
    my_soft_kb = await make_soft_kb() # ===== –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö –ò–ó –§–ê–ô–õ–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
    text_and_data = (('üü° START ALL', '#P1'), ('üí° MANUAL', '#P3'), ('üî¥ STOP ALL', '#P2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    my_soft_kb.add(*row_btns)
    iMsg = 'üìù –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è {' + iTime + '}'
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_soft_kb)

# End SOFT --------------]


# [7] ---------- KINO --------------]
@dp.message_handler(lambda message: message.text == str(but13.text)) # but13=('üìΩ KINO')   +++++ KINO +++++
async def main_menu_kino(message: types.Message): # –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –º–µ–Ω—é: –°–ø–∏—Å–æ–∫ –∫–∏–Ω–æ –∏–∑ –ø–∞–ø–∫–∏ MAIN
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/kino_main_list.sh'])
       my_kino_kb = types.InlineKeyboardMarkup(row_width=3)
       zDir = '/mnt/SSD/iKINO/MAIN'
       file1 = open(myDir + '/data/Kino_Main_List.txt', 'r') # –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
       lines = file1.readlines() # —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
       for line in lines: # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
           my_text = 'üîò Ô∏è' + line.strip()
           my_data = '#K' + line.strip() # !!! –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ - –≤—ã–¥–∞–µ—Ç –û–®–ò–ë–ö–£!!!
           my_kino_kb.add(types.InlineKeyboardButton(my_text, callback_data=my_data))
       file1.close # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
##       btn_kino_kb.add(types.InlineKeyboardButton('aiogram source', url='https://github.com/aiogram/aiogram')) # OK!
### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–∏–Ω–æ !!! Good!
       text_and_data = (('üìÅ MAIN', '#D1'), ('üìÅ izYoutube', '#D2'))
       row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
       my_kino_kb.row(*row_btns)
       today = datetime.now(tz)
       iTime = today.strftime("%H:%M:%S")
       iMsg = 'üìÅ1.*MAIN:* {' + iTime + '}'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=my_kino_kb)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


# ------ –ó–ê–ü–£–°–ö –í–ò–î–ï–û ---------] üåêüåêüåê –≠–¢–û–¢ –ú–ï–¢–û–î –¢–û–õ–¨–ö–û –î–õ–Ø INLINE-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ("–ø–ª–∞–≤–∞—é—â–µ–π")
#@dp.callback_query_handler(lambda c: c.data and c.data == '#K') # ------ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ü–£–°–ö–ê –í–ò–î–ï–û –ü–û –ù–ê–ñ–ê–¢–ò–Æ –ö–ù–û–ü–û–ö –° –§–ò–õ–¨–ú–ê–ú–ò
#async def my_kino_kb_callback_buttons(callback_query: types.CallbackQuery):
#@dp.callback_query_handler(lambda call: True) # !!!!!! Good
@dp.callback_query_handler(lambda c: c.data[0:2] == '#K') # !!!!!! Good   +++++ KINO +++++
async def my_kino_kb_callback_buttons(call: types.CallbackQuery): # call = CallbackQuery üåêüåêüåê https://core.telegram.org/bots/api#callbackquery
#    code = call.from_user # {"id": 408372130, "is_bot": false, "first_name": "–î–º–∏—Ç—Ä–∏–π", "last_name": "–ü–∞–Ω—Ñ–∏–ª–æ–≤", "username": "dnp_gtt", "language_code": "ru"}
#    code = call.message # GOOD = Full Info for all Buttons !!!
#    code = "–û–∫! –ó–∞–ø—É—Å–∫–∞—é.." + call.message.text # Good - –í—ã–≤–æ–¥ –≤–µ—Ä—Ö–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    code = call.data # Ok! Good = –í—ã–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª–∞–º–∏ '#K'
    my_str = code.strip('#K')
    newDir = call.message.text[1:2]
    logger.debug('The Index is %r', newDir)
    subprocess.call(['/bin/bash', myDir + '/scripts/start_vlc.sh', my_str, newDir])
#    if newDir == '1':
#       zDir = '/mnt/SSD/iKINO/MAIN'
#    else:
#       zDir = '/mnt/SSD/iKINO/izYoutube'
    with open(myDir + '/scripts/.vlc.info', 'r') as file1: # .vlc.info
       iMsg = file1.read()
#       vlcPult = file1.read()
#    iMsg = 'üìΩ  –ó–∞–ø—É—â–µ–Ω —Ñ–∞–π–ª:&#10;<b>' + my_str + '</b>&#10;' + vlcPult # GOOD!!! [&#10;]=–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
#    subprocess.call(['/bin/bash', myDir + '/scripts/volume.sh', '85'], shell=True) # 0=mute, 1=volume- [-5%], 2=volume+ [+5%], other=unmute..%
    subprocess.call(['/bin/bash', myDir + '/scripts/volume.sh', '85']) # 0=mute, 1=volume- [-5%], 2=volume+ [+5%], other=unmute..%
    with open(myDir + '/scripts/volume.txt', 'r') as file2: # Volume
       iZvuk = file2.readline()
    btn_kino_kb = types.InlineKeyboardMarkup(row_width=3)
    text_and_data = (('üìÅ MAIN', '#D1'), ('‚èπ STOP [VLC]', '#Svlc'), ('üìÅ izYoutube', '#D2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    btn_kino_kb.row(*row_btns)
    text_and_data = (('üîΩ Volume -', '#Z1'), (str(iZvuk), '#Z0'), ('üîº Volume +', '#Z2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    btn_kino_kb.row(*row_btns)
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=btn_kino_kb)


# ----------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–æ–∫ = –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ö–∏–Ω–æ –ø–∞–ø–∫–∏ MAIN –∏–ª–∏ izYoutube
@dp.callback_query_handler(lambda c: c.data[0:2] == '#D') # ('üìÅ MAIN', '#D1') ('üìÅ izYoutube', '#D2')   +++++ KINO +++++
#@dp.callback_query_handler(lambda c: c.data and c.data == '#D') # –û–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ —Å–ª–æ–¥–µ—Ä–∂–∏—Ç "#D" ('üìÅ MAIN', '#D1') ('üìÅ izYoutube', '#D2')
async def folder_kino_btns(call: types.CallbackQuery):
    code = call.data # Ok! Good = –í—ã–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª–∞–º–∏ '#S'
    my_str = code.strip('#D')
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
#    iMsg = 'üìÅ1. *MAIN:* {' + iTime + '}'
    if my_str == '2':
       zDir = '/mnt/SSD/iKINO/izYoutube'
       iMsg = 'üìÅ2.*izYoutube:* {' + iTime + '}'
       myScr = myDir + '/scripts/kino_izyoutube_list.sh'
       myList = myDir + '/data/Kino_izYoutube_List.txt'
    else: #    elif my_str == '1':
       zDir = '/mnt/SSD/iKINO/MAIN'
       iMsg = 'üìÅ1.*MAIN:* {' + iTime + '}'
       myScr = myDir + '/scripts/kino_main_list.sh'
       myList = myDir + '/data/Kino_Main_List.txt'
    subprocess.call(['/bin/bash', myScr])
    my_kino_kb = types.InlineKeyboardMarkup(row_width=2)
    file1 = open(myList, 'r') # –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    lines = file1.readlines() # —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    for line in lines: # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        my_text = 'üîò Ô∏è' + line.strip()
        my_data = '#K' + line.strip() # !!! –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ - –≤—ã–¥–∞–µ—Ç –û–®–ò–ë–ö–£!!!
        my_kino_kb.add(types.InlineKeyboardButton(my_text, callback_data=my_data))
    file1.close # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    text_and_data = (('üìÅ MAIN', '#D1'), ('üìÅ izYoutube', '#D2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    my_kino_kb.row(*row_btns)
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_kino_kb)


@dp.callback_query_handler(lambda c: c.data[0:2] == '#Z') # ('üîΩ Volume -', '#Z1'), ('üîº Volume +', '#Z2')   +++++ KINO +++++
async def folder_kino_btns(call: types.CallbackQuery):
    code = call.data # Ok! Good = –í—ã–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª–∞–º–∏ '#S'
    my_str = code.strip('#Z')
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    with open(myDir + '/scripts/.vlc.info', 'r') as file1: # .vlc.info
       iMsg = file1.read()
#       vlcPult = file1.read()
#    iMsg = 'üìΩ  –ó–∞–ø—É—â–µ–Ω —Ñ–∞–π–ª:&#10;<b>' + my_str + '</b>&#10;' + vlcPult # GOOD!!! [&#10;]=–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
#    iMsg = 'üï∞ {' + iTime  + '}'
#    subprocess.call(['/bin/bash', myDir + '/scripts/volume.sh', my_str], shell=True) # 0=mute, 1=volume- [-5%], 2=volume+ [+5%], other=unmute..%
    subprocess.call(['/bin/bash', myDir + '/scripts/volume.sh', my_str]) # 0=mute, 1=volume- [-5%], 2=volume+ [+5%], other=unmute..%
    with open(myDir + '/scripts/volume.txt', 'r') as file2: # Volume
       iZvuk = file2.readline() # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    btn_kino_kb = types.InlineKeyboardMarkup(row_width=3)
    text_and_data = (('üìÅ MAIN', '#D1'), ('‚èπ STOP [VLC]', '#Svlc'), ('üìÅ izYoutube', '#D2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    btn_kino_kb.row(*row_btns)
    text_and_data = (('üîΩ Volume -', '#Z1'), (str(iZvuk), '#Z0'), ('üîº Volume +', '#Z2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    btn_kino_kb.row(*row_btns)
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.HTML, reply_markup=btn_kino_kb)
#    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_kino_kb)


@dp.callback_query_handler(lambda c: c.data == '#Svlc') # call = CallbackQuery üåêüåêüåê For STOP [VLC] buttons   +++++ KINO +++++
async def stop_vlc_btn(call: types.CallbackQuery): # call = CallbackQuery üåêüåêüåê https://core.telegram.org/bots/api#callbackquery
#    subprocess.call(['/bin/bash', myDir + '/scripts/volume.sh', '0']) # 0=mute, 1=volume- [-5%], 2=volume+ [+5%], other=unmute..%
#    with open(myDir + '/scripts/volume.txt', 'r') as file2: # Volume
#       iZvuk = file2.readline() # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
#    btn_kino_kb = types.InlineKeyboardMarkup(row_width=3)
#    text_and_data = (('üìÅ MAIN', '#D1'), ('‚èπ STOP [VLC]', '#Svlc'), ('üìÅ izYoutube', '#D2'))
#    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
#    btn_kino_kb.row(*row_btns)
#    text_and_data = (('üîΩ Volume -', '#Z1'), (str(iZvuk), '#Z0'), ('üîº Volume +', '#Z2'))
#    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
#    btn_kino_kb.row(*row_btns)
#    code = call.data # Ok! Good = –í—ã–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª–∞–º–∏ '#S'
#    my_str = code.strip('#S')
#    subprocess.call(['/bin/bash', myDir + '/scripts/kill_proc.sh', my_str])
    subprocess.call(['/bin/bash', myDir + '/scripts/kill_proc.sh', 'vlc'])
    iMsg = '‚ò†Ô∏è *VLC Player is stoped!*'
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN)
    time.sleep(1)   # Delays for 1 second
    today = datetime.now(tz)
    iTime = today.strftime("%H:%M:%S")
    zDir = '/mnt/SSD/iKINO/MAIN'
    iMsg = 'üìÅ1.*MAIN:* {' + iTime + '}'
    myScr = myDir + '/scripts/kino_main_list.sh'
    myList = myDir + '/data/Kino_Main_List.txt'
    subprocess.call(['/bin/bash', myScr])
    my_kino_kb = types.InlineKeyboardMarkup(row_width=2)
    file1 = open(myList, 'r') # –ø–æ–ª—É—á–∏–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    lines = file1.readlines() # —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    for line in lines: # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        my_text = 'üîò Ô∏è' + line.strip()
        my_data = '#K' + line.strip() # !!! –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ - –≤—ã–¥–∞–µ—Ç –û–®–ò–ë–ö–£!!!
        my_kino_kb.add(types.InlineKeyboardButton(my_text, callback_data=my_data))
    file1.close # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    text_and_data = (('üìÅ MAIN', '#D1'), ('üìÅ izYoutube', '#D2'))
    row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
    my_kino_kb.row(*row_btns)
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=my_kino_kb)



#@dp.callback_query_handler(lambda c: c.data and c.data == '#S') # call = CallbackQuery üåêüåêüåê For all [STOP] buttons
@dp.callback_query_handler(lambda c: c.data[0:2] == '#S') # call = CallbackQuery üåêüåêüåê For all [STOP] buttons   +++++ KINO +++++
async def soft_kb_callback_buttons(call: types.CallbackQuery): # call = CallbackQuery üåêüåêüåê https://core.telegram.org/bots/api#callbackquery
    code = call.data # Ok! Good = –í—ã–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª–∞–º–∏ '#S'
    my_str = code.strip('#S')
    subprocess.call(['/bin/bash', myDir + '/scripts/kill_proc.sh', my_str])
    iMsg = '*[' + my_str + '] is stoped!*'
    await bot.edit_message_text(iMsg, call.from_user.id, call.message.message_id, parse_mode=ParseMode.MARKDOWN, reply_markup=btn_kino_kb)

# End KINO --------------]



# [8] ---------- DLNA --------------]
@dp.message_handler(lambda message: message.text == str(but81.text)) # but81=('üÜó Status')   +++++ DLNA +++++
async def dlna_status(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/but80_dlna.sh', 'status'])
       with open(myDir + '/scripts/but80_dlna.txt', 'r') as file1:
          iMsg = file1.read()
       await message.answer(iMsg, parse_mode=ParseMode.HTML, reply_markup=kb_dlna_menu)
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but82.text)) # but82=('üî† D.Base')   +++++ DLNA +++++
async def dlna_force_reload(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/but80_dlna.sh', 'force-reload'])
       iMsg = 'üì∫*DLNA*:\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö *–º–µ–¥–∏–∞* —Å–æ –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç *2 —Å–µ–∫ –¥–æ –Ω–µ—Å–∫. –º–∏–Ω*!'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_dlna_menu)
       await dlna_status(message)
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

@dp.message_handler(commands=['server_kino']) # –ó–∞–ø—É—Å–∫ –°–µ—Ä–≤–µ—Ä–∞ –ö–∏–Ω–æ –∏–∑ –ú–µ–Ω—é –ö–æ–º–∞–Ω–¥ (—Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É)
@dp.message_handler(lambda message: message.text == str(but83.text)) # but83=('üÜï Server')   +++++ DLNA +++++
async def dlna_server(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/start_kino.sh'])
       subprocess.call(['/bin/bash', myDir + '/scripts/but80_dlna.sh', 'restart'])
#    with open('./scripts/but83_server.txt', 'r') as file1:
#       iMsg = file1.read()
       iMsg = 'üì∫*DLNA*:\n–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è *Remote-Server*!\n–í–∏–¥–µ–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö:\n*[~/MOSCOW/Video/..]*'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_dlna_menu)
       await dlna_status(message)
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but84.text)) # but84=('üÜô Start')   +++++ DLNA +++++
async def dlna_start(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/but80_dlna.sh', 'start'])
       iMsg = 'üì∫*DLNA*:\n–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ö–∏–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è!'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_dlna_menu)
       await dlna_status(message)
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but85.text)) # but85=('üîÑ Reload')   +++++ DLNA +++++
async def dlna_restart(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/but80_dlna.sh', 'restart'])
       iMsg = 'üì∫*DLNA*:\n–°–µ—Ä–≤–∏—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_dlna_menu)
       await dlna_status(message)
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True


@dp.message_handler(lambda message: message.text == str(but86.text)) # but86=('‚èπ  STOP')   +++++ DLNA +++++
async def dlna_restart(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       subprocess.call(['/bin/bash', myDir + '/scripts/but80_dlna.sh', 'stop']) # –¢–∞–º –∂–µ fusermount -u $HOME/MOSCOW
       iMsg = 'üì∫*DLNA*:\n–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–≤—è–∑—å —Å *Remote-Server* —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞!'
       await message.answer(iMsg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_dlna_menu)
       await dlna_status(message)
#       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True

# End ---------- DLNA --------------]



@dp.message_handler(commands=['help24'])
async def process_help_command(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
# –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ MediaGroup # GOOD!!
#       await asyncio.sleep(1) # Wait a little
#       await types.ChatActions.upload_photo() # Good bots should send chat actions
#       media = types.MediaGroup() # Create media group
#       media.attach_photo(types.InputFile(myDir + '/data/Images/0bg.jpg'), 'Best BackGround!') # Attach local file
#       media.attach_photo(types.InputFile(myDir + '/data/Images/city.jpg'), 'City') # More local files
#       media.attach_photo(types.InputFile(myDir + '/data/Images/berezy.jpg'), 'Russian Trees') # More local files
#       media.attach_photo(types.InputFile(myDir + '/data/Images/lake.jpg'), 'Lake') # More local files
#       media.attach_photo(types.InputFile(myDir + '/data/Images/house.jpg'), 'house') # More local files
#       media.attach_photo(types.InputFile(myDir + '/data/Images/moscow.jpg'), 'Moscow') # More local files
#       media.attach_photo(types.InputFile(myDir + '/data/Images/tuman.jpg'), 'Tuman') # More local files
#       media.attach_photo(types.InputFile(myDir + '/data/Images/mountains.jpg'), 'Mountains') # More local files
#       await message.answer_media_group(media=media) ### Done! Send media group
#
#       await message.answer(help_command, parse_mode=ParseMode.MARKDOWN)
#       await message.answer(help_command, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
# –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —É–∑–∫–æ–µ —Å–æ–æ–±–µ—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è))
#       with open(myDir + '/data/menu.jpg', 'rb') as img:
#          await message.answer_photo(img, help_command, parse_mode=ParseMode.HTML)
       await message.answer(help_command, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



@dp.message_handler(commands=['off', 'stop', 'by', 'stop_bot']) # –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Å–æ —Å–ª—ç—à–æ–º [/stop], –∞ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è –±–µ–∑ —Å–ª—ç—à–∞ [/]
async def command_stop(message):
    global PASS
    if PASS and str(message.chat.id) in str(ID):
       reply_text = "–ü–æ–∫–∞!"
#       await message.reply(reply_text, reply_markup=types.ReplyKeyboardRemove())
       await message.reply(reply_text, reply_markup=types.ReplyKeyboardRemove())
       time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
       # with message, we send types.ReplyKeyboardRemove() to hide the keyboard
       PASS = False
    else:
       return True



@dp.message_handler(content_types=['photo'])
async def save_photo(message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iDay = today.strftime("%y%m%d")
#       t_name = today.strftime("%y%m%d_%H%M%S")
       try:
#          file_info = bot.get_file(message.photo[len(message.photo)-1].file_id)
#          file_id = message.photo[-1].file_id
#          downloaded_file = bot.download_file(file_info.file_path)
#          myFile = myDir + '/data/Images/' + file_info.file_path
#          myFile = myDir + '/data/Images/' + 'test.jpg' # GOOD!!
#          myFile = myDir + '/data/Images/' + t_name + '.jpg'
#          with open(myFile, 'wb') as new_file:
#             new_file.write(downloaded_file)
#          file_info = await bot.get_file(message.photo[-1].file_id)
#          await message.photo[-1].download(myFile)
#          await message.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: " + myFile)
          file_id = message.photo[-1].file_id # –ü–æ–ª—É—á–∞–µ–º File ID, –ø–æ –∫–æ—Ç. –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –≤ —ç—Ç–æ–º>
          file_info = await bot.get_file(file_id) # JSON –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª—É
          path = file_info.file_path # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞: documents/file_25.docx
#          myFile = myDir + '/data/Images/' + iDay + '-' + str(path.strip('photos/')) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: [_] –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑-–∑–∞ MARKDOWN!
          myFile = myDir + '/data/Images/' + iDay + '-' + str(path.strip('photos/')) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: [_] –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑-–∑–∞ MARKDOWN!
          await bot.download_file(path, myFile)
          iW = message.photo[-1].width
          iH = message.photo[-1].height
          iS = message.photo[-1].file_size
#          with open(myFile, 'w') as new_file: # 'wb' –¥–∞–µ—Ç –æ—à–∏–±–∫—É!!!
#             new_file.write(bot.download_file(file_info.file_path))
          Width = '‚óè <b>width:</b> <i>' + str(iW) + '</i>&#10;'
          Height = '‚óè <b>height:</b>  <i>' + str(iH) + '</i>&#10;'
          Size = '‚óè <b>file_size:</b>  <i>' + str(iS) + '</i>&#10;'
          FileID = '‚óè <b>file_id:</b> <code>' + file_id + '</code>'
          iMsg = '‚úÖ <u>–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω</u>:&#10;<code>' + myFile + '</code>&#10;' + Width + Height + Size + FileID
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
       except Exception as error: # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—à–∏–±–æ–∫ –ü—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞!
          iMsg = '‚ÑπÔ∏è <b>' + str(error) + '!</b>&#10;&#10;‚õî –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 20 –ú–±–∞–π—Ç.&#10;üí∞ <b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é!</b>'
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



@dp.message_handler(content_types=['video'])
async def save_photo(message):
    if PASS and str(message.chat.id) in str(ID):
       today = datetime.now(tz)
       iDay = today.strftime("%y-%m-%d")
       try:
          file_id = message.video.file_id # –ü–æ–ª—É—á–∞–µ–º File ID, –ø–æ –∫–æ—Ç. –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –≤ —ç—Ç–æ–º –ë–æ—Ç–µ
          file_info = await bot.get_file(file_id) # JSON –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª—É
          file_name = message.video.file_name # –ü–æ–ª—É—á–∞–µ–º "—Ä–æ–¥–Ω–æ–µ" –∏–º—è —Ñ–∞–π–ª–∞ *.mp4
          if file_name == None:
             file_name = file_info.file_path.strip('videos/')
          myFile = myDir + '/data/Video/' + str(file_name) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:
          path = file_info.file_path # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞: videos/file_86.mp4
          await bot.download_file(path, myFile)
          iS = message.video.file_size
          iW = message.video.width
          iH = message.video.height
          iL = message.video.duration
          Size = '‚óè <b>file_size:</b>  <i>' + str(iS) + '</i>&#10;'
          Width = '‚óè <b>width:</b> <i>' + str(iW) + '</i>&#10;'
          Height = '‚óè <b>height:</b>  <i>' + str(iH) + '</i>&#10;'
          Duration = '‚óè <b>duration:</b> <i>' + str(iL) + '</i>&#10;'
          FileID = '‚óè <b>file_id:</b> <code>' + file_id + '</code>'
          iMsg = '‚úÖ <u>–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω</u>:&#10;<code>' + myFile + '</code>&#10;' + Size + Width + Height + Duration + FileID
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
#          file_info = await bot.get_file(video_id) # JSON –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª—É
#          path = file_info.file_path # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞: documents/file_25.docx
#          myFile = myDir + '/data/Video/' + iDay + '_' + str(path.strip('videos/')) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
#          await bot.download_file(path, myFile)
#          await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–ø–∫—É <b>../Video</b>: " + myFile, parse_mode=ParseMode.HTML)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
       except Exception as error: # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—à–∏–±–æ–∫ –ü—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞!
          iMsg = '‚ÑπÔ∏è <b>' + str(error) + '!</b>&#10;&#10;‚õî –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 20 –ú–±–∞–π—Ç.&#10;üí∞ <b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é!</b>'
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



@dp.message_handler(content_types=['audio'])
async def save_audio(message):
    if PASS and str(message.chat.id) in str(ID):
       try:
          file_id = message.audio.file_id # –ü–æ–ª—É—á–∞–µ–º File ID, –ø–æ –∫–æ—Ç. –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –≤ —ç—Ç–æ–º –ë–æ—Ç–µ
          file_info = await bot.get_file(file_id) # JSON –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª—É
          file_name = message.audio.file_name # –ü–æ–ª—É—á–∞–µ–º "—Ä–æ–¥–Ω–æ–µ" –∏–º—è —Ñ–∞–π–ª–∞ *.mp4
          if file_name == None:
             file_name = file_info.file_path.strip('music/')
          myFile = myDir + '/data/Voice/' + str(file_name) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:
          path = file_info.file_path # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞: music/file_86.mp4
          await bot.download_file(path, myFile)
          iS = message.audio.file_size
          iT = message.audio.title
          iP = message.audio.performer
          iL = message.audio.duration
          Size = '‚óè <b>file_size:</b>  <i>' + str(iS) + '</i>&#10;'
          Title = '‚óè <b>title:</b> <i>' + str(iT) + '</i>&#10;'
          Performer = '‚óè <b>performer:</b>  <i>' + str(iP) + '</i>&#10;'
          Duration = '‚óè <b>duration:</b> <i>' + str(iL) + '</i>&#10;'
          FileID = '‚óè <b>file_id:</b> <code>' + file_id + '</code>'
          iMsg = '‚úÖ <u>–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω</u>:&#10;<code>' + myFile + '</code>&#10;' + Size + Performer + Title + Duration + FileID
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
#          file_info = await bot.get_file(audio_id)
#          path = file_info.file_path
#          myFile = myDir + '/data/Video/' + 'test.mp4'
#          await message.video[-1].download(myFile)
#          await message.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: " + myFile)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
       except Exception as error: # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—à–∏–±–æ–∫ –ü—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞!
          iMsg = '‚ÑπÔ∏è <b>' + str(error) + '!</b>&#10;&#10;‚õî –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 20 –ú–±–∞–π—Ç.&#10;üí∞ <b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é!</b>'
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



@dp.message_handler(content_types=['sticker'])
async def save_sticker(message):
    if PASS and str(message.chat.id) in str(ID):
       try:
          file_id = message.sticker.file_id # –ü–æ–ª—É—á–∞–µ–º File ID, –ø–æ –∫–æ—Ç. –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –≤ —ç—Ç–æ–º –ë–æ—Ç–µ
          file_info = await bot.get_file(file_id) # JSON –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª—É
#          file_name = message.sticker.file_name # –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è !!!
#          if file_name == None:
          file_name = file_info.file_path.strip('stickers/file')
          iN = message.sticker.set_name
#          myFile = myDir + '/data/Stickers/' + str(file_name) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:
          myFile = myDir + '/data/Stickers/' + str(iN) + str(file_name) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:
          path = file_info.file_path # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞: stickers/file_102.mp4
          await bot.download_file(path, myFile)
          iS = message.sticker.file_size
          iE = message.sticker.emoji
          iW = message.sticker.width
          iH = message.sticker.height
          Size = '‚óè <b>file_size:</b>  <i>' + str(iS) + '</i>&#10;'
          Width = '‚óè <b>file_size:</b>  <i>' + str(iW) + '</i>&#10;'
          Height = '‚óè <b>file_size:</b>  <i>' + str(iH) + '</i>&#10;'
          Emoji = '‚óè <b>file_size:</b>  <i>' + str(iE) + '</i>&#10;'
          Set_Name = '‚óè <b>file_size:</b>  <i>' + str(iN) + '</i>&#10;'
          FileID = '‚óè <b>file_id:</b> <code>' + file_id + '</code>'
          iMsg = '‚úÖ <u>–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω</u>:&#10;<code>' + myFile + '</code>&#10;' + Size + Width + Height + Emoji + Set_Name + FileID
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
       except Exception as error: # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—à–∏–±–æ–∫ –ü—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞!
          iMsg = '‚õîÔ∏è <b>' + str(error) + '!</b>&#10;&#10;üí∞ <b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é!</b>'
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



@dp.message_handler(content_types=['document'])
async def save_document(message):
    if PASS and str(message.chat.id) in str(ID):
       try:
          today = datetime.now(tz)
          iDay = today.strftime("%y-%m-%d")
          file_id = message.document.file_id # –ü–æ–ª—É—á–∞–µ–º File ID, –ø–æ –∫–æ—Ç. –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –≤ —ç—Ç–æ–º –ë–æ—Ç–µ
          file_info = await bot.get_file(file_id) # JSON –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª—É
          file_name = message.document.file_name # –ü–æ–ª—É—á–∞–µ–º "—Ä–æ–¥–Ω–æ–µ" –∏–º—è —Ñ–∞–π–ª–∞ *.mp4
          if file_name == None:
             file_name = file_info.file_path.strip('documents/')
          myFile = myDir + '/data/PDF/' + str(file_name) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:
          path = file_info.file_path # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞: documents/file_86.mp4
          iS = message.document.file_size
          Size = '‚óè <b>file_size:</b>  <i>' + str(iS) + '</i>&#10;'
          FileID = '‚óè <b>file_id:</b> <code>' + file_id + '</code>'
          await bot.download_file(path, myFile)
          iMsg = '‚úÖ <u>–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω</u>:&#10;<code>' + myFile + '</code>&#10;' + Size + FileID
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
#          document_id = message.document.file_id # –ü–æ–ª—É—á–∞–µ–º File ID, –ø–æ –∫–æ—Ç. –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –æ–±–ª–∞–∫–∞ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –≤ —ç—Ç–æ–º –ë–æ—Ç–µ
#          file_info = await bot.get_file(document_id) # JSON –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª—É
#          path = file_info.file_path # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞: documents/file_25.docx
#          ext = file_info.mime_type
#          myFile = myDir + '/data/PDF/' + iDay + '_' + str(path.strip('documents/')) # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
#          await bot.download_file(path, myFile)
#          with open(myFile, 'w') as new_file: # 'wb' –¥–∞–µ—Ç –æ—à–∏–±–∫—É!!!
#             new_file.write(bot.download_file(file_info.file_path))
#          await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–ø–∫—É *../PDF*: " + myFile)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
       except Exception as error:
          iMsg = '‚ÑπÔ∏è <b>' + str(error) + '!</b>&#10;&#10;‚õîÔ∏è –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 20 –ú–±–∞–π—Ç.&#10;üí∞ <b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é!</b>'
          await message.answer(iMsg, parse_mode=ParseMode.HTML)
          time.sleep(7) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
    else:
       return True



@dp.message_handler()
async def all_msg_handler(message: types.Message):
    if PASS and str(message.chat.id) in str(ID):
       btn_txt = message.text
       if btn_txt[0:5] == 'https':
          time.sleep(3) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É) –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
          reply_text = '‚òïÔ∏è –∂–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ‚è≥..'
          await message.answer(reply_text, parse_mode=ParseMode.MARKDOWN)
          subprocess.call(['/bin/bash', myDir + '/scripts/youtube_dl.sh', btn_txt])
#          subprocess.call(['cd', '/home/bunta/0.SSD/iKINO/izYoutube', ' && ', '/snap/bin/youtube-dl', btn_txt])
#          subprocess.call(['/bin/bash', './scripts/start_vlc.sh', btn_txt])
          reply_text = '–û–∫! _–ó–∞–ø—É—Å–∫–∞—é_ ...'
          await message.answer(reply_text, parse_mode=ParseMode.MARKDOWN)
       elif btn_txt[0:2] == '!!':
           subprocess.call(['/bin/bash', myDir + '/scripts/kill_proc.sh', 'sm'])
       elif btn_txt[0:1] == '!':
           subprocess.call(['/bin/bash', myDir + '/scripts/sms.sh', btn_txt.strip('!')])
#          reply_text = '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ü–ö: *[' + str(btn_txt) + ']*'
#          await message.answer(reply_text, parse_mode=ParseMode.MARKDOWN)
           msg = await message.answer('üëè') # = —Ö–ª–æ–ø–∞–Ω—å–µ –≤ –ª–∞–¥–æ—à–∏
           await asyncio.sleep(3) # –ø–∞—É–∑–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è
           await msg.delete() # —É–¥–∞–ª—è–µ—Ç —Ö–ª–æ–ø–∞–Ω—å–µ –≤ –ª–∞–¥–æ—à–∏
       elif '%' in btn_txt:
          zVuk = btn_txt.strip('%')
          subprocess.call(['/bin/bash', myDir + '/scripts/volume.sh', zVuk])
          time.sleep(2) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å"
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É) –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
       elif btn_txt[0:2] == '?w':
          iMsg = 'üîç .. —è —Å–ø—Ä–æ—Å–∏–ª —É <b>–Ø–Ω–¥–µ–∫—Å–∞</b>, –∂–¥–∏—Ç–µ <b>—Å–µ–∫—É–Ω–¥ 10..</b>'
          sms = await bot.send_message(chat_id=message.chat.id, text=iMsg, parse_mode=ParseMode.HTML)
          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É) –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
          subprocess.call(['/bin/bash', myDir + '/scripts/scrot_img.sh'])
#          time.sleep(8) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å"
          today = datetime.now(tz)
          iDay = today.strftime("%d-%m-%y_%H:%M")
          iMsg = 'üå§ <i>–ú–æ—Å–∫–≤–∞ ' + str(iDay) + '</i>'
          with open(myDir + '/data/img00.png', 'rb') as img:
             await bot.send_photo(message.chat.id, img, iMsg, parse_mode=ParseMode.HTML)
          await bot.delete_message(chat_id=message.chat.id, message_id=sms.message_id) # –£–¥–∞–ª—è–µ–º —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ
       elif btn_txt[0:1] == '@':
          return True
       elif btn_txt[0:1] == '#':
          return True
       else:
          logger.debug('The answer is %r', btn_txt)  # print the text we've got
#          time.sleep(2) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#          await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É) –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
          reply_text = 'üóø'
          await message.answer(reply_text)
          time.sleep(3)
          reply_text = '‚õîÔ∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!'
          await message.answer(reply_text)
          time.sleep(2)
          await process_help_command(message)
#          await message.reply(reply_text, parse_mode=ParseMode.MARKDOWN)
#       await message.answer(reply_text, parse_mode=ParseMode.MARKDOWN)
    else:
       await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
#       return True



#### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á—É–∂–∞–∫–æ–≤ (—É –∫–æ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ID, –Ω–æ –ø–æ–¥–æ–±—Ä–∞–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É!)
async def other_people(message):
    global PASS
    PASS = False
    cid = message.chat.id
    today = datetime.now(tz)
    Now = today.strftime("%d-%m_%H:%M")
#    Now = '28-05_14:46'
#    Now = today.strftime("%d.%m %H:%M:%S")
#    Now = time.strftime("%d-%m_%H:%M")
    Icon = 'üöØ'
    fName = '<b>First Name:</b> <code> ' + message.from_user.first_name + '</code>\n<b>Last Name:</b> '
#    lName = 'Last Name: <b>' + message.from_user.last_name + '</b>\n'
    lName = '<code> ' + message.from_user.last_name + '</code>'
    uName = '\n<b>User Name:</b> <code> ' + message.from_user.username + '</code>\n'
    Lang = '<b>Language Code:</b> <code> ' + message.from_user.language_code + '</code> üá∑üá∫\n'
    Helo = '<b>Hello Mr.</b>' + lName + '!\n<code>++++++++++++++++++++++++</code>\n'
    iMsg = Helo + '<b>Now:</b><i> ' + Now + '</i>\n' + fName + lName + uName + Lang + '<b>ID:</b> [<code> ' + str(cid) + ' </code>]¬©Ô∏è'
#    await message.reply('*Hello World!* %s' % em00 + , parse_mode=ParseMode.MARKDOWN, reply_markup=types.ReplyKeyboardRemove())
    my_log = '<b>vtica:</b> <code>' + str(cid) + '</code> ' + Icon + ' <b>' + uName + '</b> ' + Now + ' ‚öôÔ∏è ' + message.text
    await bot.send_message(ID[1], my_log, parse_mode=ParseMode.HTML)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Log –Ω–∞ –í—Ç–æ—Ä–æ–π –º–æ–±
    await message.reply(iMsg, parse_mode=ParseMode.HTML, reply_markup=types.ReplyKeyboardRemove()) # –í—ã–¥–∞–µ–º –∏–Ω—Ñ–æ –Ω–∞ –≠–∫—Ä–∞–Ω –ø–∏—à—É—à–µ–≥–æ!
    time.sleep(1) # –ø–∞—É–∑–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º "–ø—Ä–∞–≤–æ–≥–æ —Å–º—Å" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(chat_id=cid, message_id=message.message_id) # –£–¥–∞–ª—è–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É)
# –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ + ID –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–± –¥–ª—è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ zInfo.0
    await bot.send_message(ID[0], iMsg, parse_mode=ParseMode.HTML) # –í–†–ï–ú–ï–ù–ù–û!



if __name__ == "__main__":  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
# –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è –º–æ–¥—É–ª—è, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–µ–ª –∏–º–ø–æ—Ä—Ç.
    while True:
        try:                # –¥–æ–±–∞–≤–ª—è–µ–º try –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            executor.start_polling(dp, on_startup=on_startup, skip_updates=True) # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        except Exception as error:
            iMsg = '‚õë <b>' + str(error) + '!</b>&#10;üí∞ <b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é!</b>&#10;üö¨ ..–ø–µ—Ä–µ–∫—É—Ä 5 —Å–µ–∫.'
            print (iMsg)
#            await message.answer(iMsg, parse_mode=ParseMode.HTML)
            time.sleep(5)   # –ø–µ—Ä–µ–∫—É—Ä 5 —Å–µ–∫!
#        except:             # –≤ —Å–ª—É—á–∞–µ –ø–∞–¥–µ–Ω–∏—è
#            time.sleep(5)   # –ø–µ—Ä–µ–∫—É—Ä 5 —Å–µ–∫!
